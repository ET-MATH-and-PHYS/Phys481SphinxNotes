{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# Laplace equation - matrix methods\n",
    "\n",
    "Physics 481 Fall 2021 Week 09a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Introduction\n",
    " \n",
    "Numerical solutions of Laplace's equation can be expressed as a set of linear equations.  This allows the use of matrix methods and depends on an understanding of issues such as inversion stability and sparse matrices.\n",
    "\n",
    " \n",
    " \n",
    "### Theory\n",
    "\n",
    "The electrostatic potential $V$ due to some charge $\\rho$ must satisfy Poisson's equation \n",
    "\n",
    "  $$ \\nabla^2 V = \\rho $$\n",
    "\n",
    "For a charge-free region ($\\rho=0$) this reduces to Laplace's equation\n",
    "\n",
    "  $$ \\nabla^2 V = 0 $$\n",
    "  \n",
    "which can be written in Cartesian coordinates\n",
    "\n",
    "  $$ \\frac{\\partial^2 V}{\\partial x^2} + \\frac{\\partial^2 V}{\\partial y^2} +  \\frac{\\partial^2 V}{\\partial z^2} = 0 $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 1D rectangular\n",
    "\n",
    "If $V$ depends on only one variable, $x$, then Laplace's equation in Cartesian coordinates becomes\n",
    "\n",
    "  $$ \\frac{\\partial^2 V}{\\partial x^2} = 0 $$\n",
    "\n",
    "The general solution is obtained by integrating twice \n",
    "\n",
    "  $$ V(x) = m x + b $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "If we only consider discrete locations\n",
    "\n",
    "  $$ x_i = i \\Delta x $$\n",
    "\n",
    "then the centered second difference  is\n",
    "\n",
    "$$ \\frac{\\partial^2 V}{\\partial x^2}  \n",
    "\\approx  \\left . \\frac{\\partial V}{\\partial x} \\right |_{x_{i+1}} -  \\left . \\frac{\\partial V}{\\partial x} \\right |_{x_i}\n",
    "\\approx\n",
    "\\frac{V_{i+1}-V_{i}}{x_{i+1}-x_{i}} - \\frac{V_{i}-V_{i-1}}{x_{i}-x_{i-1}}\n",
    "\\approx \n",
    "\\frac{V_{i+1} - 2V_i + V_{i-1}}{\\Delta x^2} = 0\n",
    "$$\n",
    "  \n",
    "From this the potential at any location\n",
    "\n",
    " $$  V_i = \\frac{V_{i-1} + V_{i+1}}{2} $$\n",
    " \n",
    "can be determined by calculating the average of the two nearest neighbors.  This suggests that an iterative approach (relaxation methods) might be used to solve for the potential profile."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Laplace 2D\n",
    "\n",
    "In two dimensions, Laplace's equation in Cartesian coordinates reduces to\n",
    "\n",
    "  $$ \\frac{\\partial^2 V}{\\partial x^2} + \\frac{\\partial^2 V}{\\partial y^2} = 0 $$\n",
    "\n",
    "We can replace the continous spatial dimensions by a lattice with finite spacing\n",
    "\n",
    "  $$ x_i = i \\Delta x $$\n",
    "  $$ y_j = j \\Delta y $$\n",
    "\n",
    "to see that the potential at each point is given by the average at the four closest adjoining sites *if* $\\Delta x = \\Delta y$\n",
    "\n",
    " $$ V(x_i, y_j) = V_{i,j} = \\frac{V_{i-1,j} + V_{i+1,j} + V_{i,j-1} + V_{i,j+1}}{4} $$\n",
    " \n",
    "For unequally spaced grids things are slightly more complicated\n",
    "\n",
    " $$ V_{i,j} = \\frac{ \\left ( V_{i-1,j} + V_{i+1,j} \\right ) \\Delta y^2 + \\left ( V_{i,j+1} + V_{i,j-1} \\right ) \\Delta x^2 }{2(\\Delta x^2 + \\Delta y^2 )} $$\n",
    " \n",
    "It is tempting to try and avoid dealing with the details of grid spacing by making a choice of grid dimensions that conveniently aligns with the physical boundaries.  \n",
    "\n",
    "However, it is arguably preferrable to write code that can deal with arbitrary grid sizes and spacings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy as scipy\n",
    "import scipy.sparse as sparse\n",
    "from scipy.sparse.linalg import spsolve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Matrix methods\n",
    "\n",
    "Relationships between the grid points can be written in a very compact way with matrix algebra\n",
    "\n",
    "$$\n",
    " \\mathbf{A} \\mathbf{x} = \\mathbf{y}\n",
    "$$\n",
    "\n",
    "For example, a 1-dimensional system with 5 grid points at locations\n",
    "\n",
    "  $$ x_0, \\; x_1, \\; \\ldots \\; x_4 $$\n",
    "\n",
    "with arbitrary voltages\n",
    "\n",
    "  $$V(x_0)=V_0, \\; V(x_1)=V_1, \\; \\ldots \\; V(x_4)=V_4 $$\n",
    "  \n",
    "and boundary conditions at $x_0$ and $x_4$ gives a coupled set of 5 linear equations\n",
    "\n",
    " $$ V_0 = V_a $$\n",
    " $$ V_0 -2 V_1 + V_2 = 0 $$\n",
    " $$ V_1 -2 V_2 + V_3 = 0 $$ \n",
    " $$ V_2 -2 V_3 + V_4 = 0 $$ \n",
    " $$ V_4 = V_b $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "which can be expressed as a square matrix that contains the physics of Laplace's equation\n",
    "and a column matrix containing the two boundary conditions\n",
    " $$  \n",
    "\\begin{pmatrix}\n",
    "1 & 0 & 0 & 0 & 0 \\\\\n",
    "1 & -2 & 1 & 0 & 0 \\\\\n",
    "0 & 1 & -2 & 1 & 0  \\\\\n",
    "0 & 0 & 1 & -2 & 1 \\\\\n",
    "0 & 0 & 0 & 0 & 1 \\\\\n",
    "\\end{pmatrix}\n",
    " \\begin{pmatrix}\n",
    " V_0 \\\\ V_1 \\\\ V_2 \\\\ V_3 \\\\ V_4\n",
    " \\end{pmatrix}\n",
    "=\n",
    " \\begin{pmatrix}\n",
    " V_a \\\\ 0 \\\\ 0 \\\\ 0 \\\\ V_b\n",
    " \\end{pmatrix}  \n",
    " $$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, this means that the voltages can be solved for using the matrix inverse\n",
    "\n",
    "$$\n",
    "  \\mathbf{x} = \\mathbf{A}^{-1} \\mathbf{y}\n",
    "$$\n",
    " \n",
    "\n",
    " \n",
    " $$  \n",
    " \\begin{pmatrix}\n",
    " V_0 \\\\ V_1 \\\\ V_2 \\\\ V_3 \\\\ V_4\n",
    " \\end{pmatrix}\n",
    "=\n",
    "\\begin{pmatrix}\n",
    "1 & 0 & 0 & 0 & 0 \\\\\n",
    "1 & -2 & 1 & 0 & 0 \\\\\n",
    "0 & 1 & -2 & 1 & 0  \\\\\n",
    "0 & 0 & 1 & -2 & 1 \\\\\n",
    "0 & 0 & 0 & 0 & 1 \\\\\n",
    "\\end{pmatrix}^{-1}\n",
    " \\begin{pmatrix}\n",
    " V_a \\\\ 0 \\\\ 0 \\\\ 0 \\\\ V_b\n",
    " \\end{pmatrix}\n",
    " $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "Collapsed": "false",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inverse: \n",
      " [[ 1.    0.    0.    0.    0.  ]\n",
      " [ 0.75 -0.75 -0.5  -0.25  0.25]\n",
      " [ 0.5  -0.5  -1.   -0.5   0.5 ]\n",
      " [ 0.25 -0.25 -0.5  -0.75  0.75]\n",
      " [ 0.    0.    0.    0.    1.  ]]\n",
      "\n",
      "Solution:  [0.   0.25 0.5  0.75 1.  ]\n"
     ]
    }
   ],
   "source": [
    "A = np.zeros( (5,5), dtype=np.double)\n",
    "A[0,0] = 1.0\n",
    "A[1,:] = [1, -2, 1, 0, 0]\n",
    "A[2,:] = [0, 1, -2, 1, 0]\n",
    "A[3,:] = [0, 0, 1, -2, 1]\n",
    "A[4,4] = 1.0\n",
    "\n",
    "y = np.array([0,0,0,0,1])  # column matrix of boundary conditions V(x=0)=0, V(x=1)=1\n",
    "\n",
    "print( 'Inverse: \\n', np.linalg.inv(A) )\n",
    "\n",
    "print( '\\nSolution: ', np.matmul( np.linalg.inv(A), y) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This can be applied at any grid resolution to produce a `tridiagonal` matrix\n",
    "\n",
    "$$ \\begin{bmatrix}\n",
    "   a_{1} & c_1 &  & & \\\\ \n",
    "   b_1 & a_{2} & c_2 & & & \\\\ \n",
    "   & b_2 & a_{3} & c_3 & \\\\   \n",
    "   &  & \\ddots & \\ddots & \\ddots &\\\\ \n",
    "   & & &  \\ddots  & a_{n-1} & c_{n-1} \\\\\n",
    "   & & & & b_{n-1} & a_n \n",
    " \\end{bmatrix}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  0.  0. ...  0.  0.  0.]\n",
      " [ 1. -2.  1. ...  0.  0.  0.]\n",
      " [ 0.  1. -2. ...  0.  0.  0.]\n",
      " ...\n",
      " [ 0.  0.  0. ... -2.  1.  0.]\n",
      " [ 0.  0.  0. ...  1. -2.  1.]\n",
      " [ 0.  0.  0. ...  0.  0.  1.]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Tridiagonal matrix')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ngrid=99\n",
    "A = np.zeros( (ngrid,ngrid), dtype=np.double)\n",
    "A[0,0] = 1.0\n",
    "A[-1,-1] = 1.0\n",
    "for indx in range(1,ngrid-1):\n",
    "    A[indx, indx-1:indx+2] = np.array( [1, -2, 1] )\n",
    "\n",
    "print( A )\n",
    "    \n",
    "plt.matshow( A )\n",
    "plt.title('Tridiagonal matrix')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def laplace1d_matrix(ngrid=99, Va=0, Vb=1.0, invert=False):\n",
    "    \"\"\" Solve 1-dimensional Laplace equation using matrix methods.\n",
    "    \"\"\"\n",
    "    A = np.zeros( (ngrid,ngrid), dtype=np.double)\n",
    "    A[0,0] = 1.0\n",
    "    A[-1,-1] = 1.0\n",
    "    for indx in range(1,ngrid-1):\n",
    "        A[indx, indx-1:indx+2] = np.array( [1, -2, 1] )\n",
    "        \n",
    "    y= np.zeros( ngrid, dtype=np.double ) \n",
    "    y[0] = Va\n",
    "    y[-1] = Vb\n",
    "\n",
    "    if invert:\n",
    "        v = np.matmul( np.linalg.inv(A), y)        \n",
    "        \n",
    "    else:\n",
    "        v = np.linalg.solve(A, y)      \n",
    "    \n",
    "    return (v, A, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.  0.2 0.4 0.6 0.8 1. ] \n",
      "\n",
      " [[ 1.  0.  0.  0.  0.  0.]\n",
      " [ 1. -2.  1.  0.  0.  0.]\n",
      " [ 0.  1. -2.  1.  0.  0.]\n",
      " [ 0.  0.  1. -2.  1.  0.]\n",
      " [ 0.  0.  0.  1. -2.  1.]\n",
      " [ 0.  0.  0.  0.  0.  1.]] \n",
      "\n",
      " [0. 0. 0. 0. 0. 1.]\n"
     ]
    }
   ],
   "source": [
    "v, A, y = laplace1d_matrix(ngrid=6, Va=0, Vb=1.0)\n",
    "print(v, '\\n\\n', A, '\\n\\n', y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Condition number\n",
    "\n",
    "Condition number gives an indication of inversion stability.\n",
    "It is essentially a factor which multiplies input numerical noise\n",
    "to produce (usually much) more noise in the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.994600319765407"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "# 1 is great, 10-1000 is fine, 1e9 is trouble\n",
    "#\n",
    "np.linalg.cond(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1. ,  0. ,  0. ,  0. ,  0. ,  0. ],\n",
       "       [ 0.8, -0.8, -0.6, -0.4, -0.2,  0.2],\n",
       "       [ 0.6, -0.6, -1.2, -0.8, -0.4,  0.4],\n",
       "       [ 0.4, -0.4, -0.8, -1.2, -0.6,  0.6],\n",
       "       [ 0.2, -0.2, -0.4, -0.6, -0.8,  0.8],\n",
       "       [ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Equivalently, take a look at matrix inverse.  \n",
    "# If there are a mixture of very small (1e-9) and very large (1e-9) values then \n",
    "# we should expect numerical problems.\n",
    "#\n",
    "np.linalg.inv(A)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solve, don't invert\n",
    "\n",
    "For a set of linear equations $A x = b$ we may write the solution in terms of a matrix inverse $x = A^{-1} b$. However, this is not always the best way to proceed numerically if we are just interested in the solution and don't actually require the inverse.  \n",
    "\n",
    "Instead, call a `solve` function which will usually give a result for $x$ that is more computationally efficient and numerically stable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.18 µs ± 108 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
      "6.6 µs ± 69.5 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit np.matmul( np.linalg.inv(A), v)\n",
    "%timeit np.linalg.solve( A, v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Theory vs. numerics : speed\n",
    "\n",
    "Computing time scales as $O(N^2)$, with matrix inversion taking roughly 50% to 100% longer than solving."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " numpy.linalg.solve ()\n",
      "20.1 µs ± 191 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "189 µs ± 1.59 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "461 µs ± 11.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n",
      "2 ms ± 56.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n",
      "\n",
      " Inversion is 1.5x to 2.0x times slower:\n",
      "23.3 µs ± 170 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "249 µs ± 7.33 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n",
      "608 µs ± 11.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n",
      "3.4 ms ± 41.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "print('\\n numpy.linalg.solve ()')\n",
    "%timeit laplace1d_matrix(9)   \n",
    "%timeit laplace1d_matrix(99)\n",
    "%timeit laplace1d_matrix(199)\n",
    "%timeit laplace1d_matrix(399)\n",
    "\n",
    "print('\\n Inversion is 1.5x to 2.0x times slower:')\n",
    "%timeit laplace1d_matrix(9, invert=True)   \n",
    "%timeit laplace1d_matrix(99, invert=True)\n",
    "%timeit laplace1d_matrix(199, invert=True)\n",
    "%timeit laplace1d_matrix(399, invert=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Theory vs. numerics : accuracy\n",
    "\n",
    "There is a systematic discrepancy between theory and numerical results.  For a $99 \\times 99$ grid the error is comparable to floating point truncation error (approx 1e-15).  For a $999 \\times 999$ grid the discrepancy is larger (1e-13) and has a different profile.\n",
    "\n",
    "This shows that using bigger grids can actually be worse, with small errors accumulating up over a larger number of calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'n=1999')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2oAAAE/CAYAAAA39zBmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAACpHklEQVR4nOzdd3xc1Z3//9dninovVrEkS7YluRdsjOm9OxASCJCyZEO+hIQUSNtNNmQ3bZNN8k0ICRu+pBF+IQkkdLDp3VTbcrdVLMmWrGb1Xmbm/P6YKyOEJKvMzJlyno+HHpZGd+59254rzefecz5HlFIYhmEYhmEYhmEYwcOmO4BhGIZhGIZhGIbxfqZQMwzDMAzDMAzDCDKmUDMMwzAMwzAMwwgyplAzDMMwDMMwDMMIMqZQMwzDMAzDMAzDCDKmUDMMwzAMwzAMwwgyplAzDMMwDMMwDMMIMqZQixAiEiUi/xSRWhFRInLOuO+niMifRaTF+vgvLUENI8SJyGdFpEpEekXkaRHJHfM9c54ZxizN5dwSkdNE5B0R6RGR3SJyRsD/AoYRZOb63nCq80q8/kNEjohIt4j8XUSSAvIXCyOmUIssrwOfBJom+N4vgTigENgAfEpE/jVw0Qwj9InI2cB/A1cCaUAN8Lcxm5jzzDBmYS7nloikAY8DPwNSgJ8CT4hIaoDiG0Ywm9V7w2mcV/8CfAo4HcgFYoFf++svEa5MoRYirKsdX7euWHSJyAMiEjPd5yulhpVSdyilXgfcE2zyIeCnSql+pVQt8AfgM75JbxihYa7nGd7z6B9KqX1KqWHgB8BZIrJozPfNeWZEHM3n1mlAs1LqH0opt1LqL8Ax4CM++csZhiaa3xue6Lz6EPAHpVSdUqoX+B/gWhGJm93fNjKZQi20fAy4BCgCVgGfFpECEemc4uPjM9i/jPt8hQ+zG0aomMt5JnzwPIL3n0vmPDMila5za/xzx3/fMEKZrveGJzqvJjpno4HiGRw74mkt1ETkj9aY170+2t/T1gvwyXGPi4j8SEQqROSAiHzZF8fT4E6lVINSqh14AlijlDqilEqZ4uOv09z308C/i0iiiCzGe8XEXPUIEwE81+4VkRoR2Wl9rPHF8QJsLufZZuBjIrJKRGKB7wKK984lc56FsQCeZ38QkV3WVfR/ikiCL44XALrOrTeAXBG5XkScInIDsAhz7oUkc559gK73hic6r7YAnxWRQhFJBv7NetycdzOg+47avXivAvjKz/COhx3v00A+sEQptRT4uw+PGUhjxw/3A778ofFlYACoBB7DO/a/3of7N/S6l8CcawDfUEqtsT52+vCYgTLr80wp9QLwn8BDwGGgFujhvXPJnGfh7V4Cc57dppRarZRaBRwBvujDY/qTlnNLKdWGd27bV4FmvP9Hz2POvVB1L+Y8G0vLe8NpnFd/tLZ/GdgHvGQ9bs67GdBaqCmlXgXaxz4mIousqxvbReQ1EVkyg/29gPcH93ifB76vlPJY27XMJXcwsW5v907x8Ynp7Ecp1a6U+oRSKlsptRzva+Md/6Y3AiWA51pYmsl5ppS6SylVrJSah/dNpQPYa33PnGdhLFDnmVKq29q34J2gr+aWXJ9AnVtKqVeUUicrpdLwvikvxZx7IcmcZycWqPeGU51XSimPUuo/lVKFSqk8vMXaUevDmCaH7gATuAe4WSlVKSKnAP8LnDfHfS7CO4HxKrwTHb+slKqc4z6DglLqCNO8eiIi0bw3XjhKvBNOh5RSSrwTsjutj4uAm4CzfR7YCCb+ONcAfiQi3wVeAP5dKTXkg31qNd3zzDqnFuP9hZSP99/4V0qpDuv75jyLPH45z0TkT8BlwH7ga3Pdny6BOrdEZC3eoi4W+D5Qr5R6xod/FUMvc56NEaj3hlOdV+LtCpkKVANLgV8w5qaJMT1BVahZ439PA/7hvYABeCceIiIfwfsiGO+oUuriE+w6GhhUSq239vNH4EzfpA4p5cAC6/PRX1BFeIeQrAPuwNtitQL4hFJqX2DjGYHix3PtW3iHYUTh/cX5b5PsK1zFAH/Fe3GoB/gTcPuY75vzLIL48TxDKfWvImLH2+76WryvtXA213Prm3jfcIN33s1V/o1rBIo5z+ZsLu8NpzqvMvDOmcvHe5PkV0qpe3yePsyJUnrv5IpIIfCkUmqFeBfCK1dK5cxhf+cAX1dKbRrz2EHgEqVUrXULu1MplTy35IYRWgJxrs3k+4YRjjScZ2fjnRdqzjMjYpjzzIgUupuJvI81HrhGRK6B490aV/tg14/y3i3ws/FeFTCMiOWvc01Eckb3B3wYa/6IYUQif5xn1j4Wj36Od62ig3MOaxghypxnRjjTekdNRP4GnIP39mgz3o5OLwK/BXIAJ/B3pdS0hk6JyGvAErzjctuAG5VSz4hICnA/UAD04h3HvMunfxnDCGIBPNdeBDLxjnffifdc6/XpX8YwglQgzjPgOeA1IAnvebYL+Pxo4wPDCHfmPDMiifahj4ZhGIZhGIZhGMb7BdXQR8MwDMMwDMMwDMMUaoZhGIZhGIZhGEFHW3v+jIwMVVhYqOvwhuEX27dvb1VKZerOMZY514xwFGznmjnPjHBkzjPD8L+pzjNthVphYSHbtm3TdXjD8AsROaw7w3jmXDPCUbCda+Y8M8KROc8Mw/+mOs/M0EfDMAzDMAzD50TELiJlIvLkBN8TEblTRKpEZLeInKQjo2EEM1OoGYZhGIZhGP7wFeDAJN+7FCi2Pm7C217fMIwxTKFmGIZhGIZh+JSI5AGXA7+fZJMrgfuU11tAiojkBCygYYQAbXPUjNA2MjJCfX09g4ODuqNoERMTQ15eHk6nU3cUw2Jek+Y1GWzMa9K8JiPcHcA3gcRJvj8fqBvzdb31WONMDmLOM3OehTNTqBmzUl9fT2JiIoWFhYiI7jgBpZSira2N+vp6ioqKdMcxLOY1aV6Twca8Js1rMlKJyCagRSm1XUTOmWyzCR5TE+zrJrxDIykoKPjAE8x5Zs6zcGaGPhqzMjg4SHp6esT9UAQQEdLT0yP26l2wMq9J85oMNuY1aV6TEex04AoRqQX+DpwnIn8Zt009kD/m6zygYfyOlFL3KKXWK6XWZ2Z+sIO5Oc/MeRbOTKFmzFok/lAcFcl/92AWyf8vkfx3D2aR/P8SyX/3SKeU+pZSKk8pVQhcB7yolPrkuM0eB/7F6v64EehSSs1o2OOoSH6tRfLfPRKYQs2ICOecc07Qr70iIpeISLnVqvjfJ/i+aWUcJkLh9WhEFvOaNAJBRG4WkZutLzcD1UAV8DvgC9qCBZA514yZMHPUDCMIiIgduAu4EO9wkHdF5HGl1P4xm41tZXwK3lbGpwQ6q2EYhmFMl1LqZeBl6/O7xzyugFv0pDKM0GDuqBnTtv0nP8E9PKw7xnF9fX1cfvnlrF69mhUrVvDAAw/wwgsvsHbtWlauXMlnPvMZhoaG3vec3/72t3zzm988/vW9997Ll770JQD+8pe/sGHDBtasWcPnPvc53G53IP86G4AqpVS1UmoY75j+K8dt49NWxh6Xi62f/zy77777xBsbJxRmr0dt9v3pT7z2mc8E1c+aUGVek8Gp/7nnGHjtNd0xDB8y59osdXTAww+Dy6U7SdAyhZoxLeUPPsi6b32L7T/8oe4oxz399NPk5uaya9cu9u7dyyWXXMKnP/1pHnjgAfbs2YPL5eK3v33/+plXX301Dz/88PGvH3jgAa699loOHDjAAw88wNatW9m5cyd2u537778/kH+dydoUz3QbwNslS0S2ici2Y8eOTXhAsdtZ8v/+H52/+tXsUxvHhdnrUZtjd9/NyX/6EzaHGfAxV+Y1GXyOPfkkcRddROxZZ7F7zRqO3H03wx0dumMZc2TOtdlpPP98+OhHaTr1VG/RZnyA+U1oTEv3wYMADNbWfuB7t956Kzt37vTp8dasWcMdd9wx5TYrV67k61//Ov/2b//Gpk2bSEpKoqioiJKSEgBuuOEG7rrrLm699dbjz8nMzGThwoW89dZbFBcXU15ezumnn85dd93F9u3bOfnkkwEYGBhg3rx5Pv07ncB02hRPq5UxeLtkAfcArF+/fsJtRISjiYkkNnygyVbI0/GaDLPXozaO1lZa7XbybOF1HdG8Jg3cbvpvuIFB4PXERM7ctYvoz38ePv95Xt60iXOeeEJ3wpBn3o+EjuE33iCnrIxaIHfbNjoWLCD+1VeJWrNGc7LgYgo1Y1qGG72NmDwtLZqTvKekpITt27ezefNmvvWtb3HRRRdN63nXXnstDz74IEuWLOGqq65CRFBKccMNN/DjH//Yz6knNZ02xdNqZTwT3dnZLK6sRCllOkfNUZi9HrWJ7eykMyaGPN1BwoB5TQaXY3fdxYL2du679FL+ZfNmKt56i/L//V9W/PWvbHjySY6+9RbzN27UHdOYBXOuzVB3Nz0f+xh24OADD/C3v/2NGx99lIFTTsHz+98T86lP6U4YPJRSWj7WrVunjNDx8lVXKQXqpfXrlVJK7d+/X3MipY4ePaoGBgaUUko98sgj6uKLL1b5+fmqsrJSKaXUDTfcoO644w6llFJnn322evfdd5VSSrW3t6uioiJ1zjnnqLffflsppdS+ffvU4sWLVXNzs1JKqba2NlVbWzvl8Sf6NwC2qVmcD3gvmlQDRUAUsAtYPm6by4EteO+sbQTemc6+pzrXXt20SSlQLda/WSjT/ZrU/XpUSv+/gS9UREerN3NyTrjdbM81f31MdJ7p/v8wr8ngUl5QoCpBHRn371a/dasaAvX0ypWakk3OnGfTo/tcC4Z/gxMaGFBqaEipwUHVvGyZUqDuKihQHo9HKaXU/372s+oIqCERNXzkiOawgTXVeWbuqBnTolpbAbB3dWlO8p49e/bwjW98A5vNhtPp5Le//S1dXV1cc801uFwuTj75ZG6++eYPPC81NZVly5axf/9+NmzYAMCyZcv44Q9/yEUXXYTH48HpdHLXXXexYMGCgPxdlFIuEfki8AxgB/6olNo32sZYeTtlbQYuw9vKuB/417keN37dOnjySeqef57MxYvnuruIFk6vR51Sh4dpTE3VHSMsmNdk8PAcPcriI0d4sLSU68b9m80/7TR2ZWdTsn8/Hrcbm92uKaUxW+Zcm4LHQ+M3vkHqr35FjNUUZR5we2EhX3r77eOjeT7/u9/x4IIFfOz229n3ne+w/M9/1hg6iExWwfn7w9xRCy0vr1ihFKi3srOVUiFy9cbPfHlHzZ8fU51rR194QSlQz3/607P9Zwga5jUZ+v8GQz09SoF66dxzT7htsJ1rwXqlXzfzb+BV89WvKgXq0R//eMLvv/HpTysFav8DDwQ42dTMeRYagvXfwLV7tzqWmakUqM12u/q/KSnqlzab+k5Jiers7PzA9iMjI2qnw6HK09M1pNVnqvMsvGZrG37jtO6kxfb1aU5i+FLO6afjAlz79umOYhi0HTgAgC03V3MSw/CtkX/+k73AWZ/73ITfX/zVr+IBms1yKUYYKb/hBhKOHeN/iotZd/QoX+3o4Oa+Pv5z3z6Sk5M/sL3D4eDIqlUsamtjuKlJQ+LgYwo1Y1qirQItftw6IEZok+hojkZHE3v4sO4ohkHHfu/67jFFRZqTGIbvqO5uFhw5woHCQlInGdabuXIl+5KSmPfGG3gvsBtGaGvas4dFZWW8sGgR3ywvZ15WFgAxMTE4plh+JdlqMlI5bjmDSGUKNWNa4gYGAEgaGdGcxPC1tsxMMtvbdccwDHqrqgBIMPMljTBS+6c/EQXEXnXVlNv1XnABy4aGqH7hhcAEMww/qvr2t4kGlv3qVzPqKr32pps4BgyH6dpxM2UKNWNaEoeHAUhVCuXxaE5j+NJwURGFLhfdZrFJQ7PBmhoAUpct05zEMHyn5f776QM23HbblNvlf/nLANT/5jcBSGUYfuTxUPTcc2yLj6fo8stn9NTE1FTeKi5mxaFDjDQ3+ylg6DCFmjEtKW43I3h7yHfX1emOY/hQ9MqVxALVr7yiO4oR4TzW4uvpS5dqTmIYvpO5Zw97UlOZl58/5XZ5Z59NeXQ02S++COaCqBHCGu+9l/lDQ9R96EOzen7yjTfiBPaeYKHxSGAKNeOEhrq7SQDqoqIA6Dx0SG8gw6cyTj8dgGOvvaY5iRHpbM3NtIoQlZCgO4ph+ER/YyOFg4P0rlw5re0PbdpEaU8P+7/5TT8nMwz/6fj+92kCNvz3f8/q+Ru/9CU6Reh96CHfBgtBplAzTqjDmjdyzJoE3RskjSdOO+00vx/j3nvvpcG6yh+ucs45B4DBXbv0BgkD5jU5N1EdHXRYF4QM3zCvSb2qHngAG5Bw3nnT2v68++7j3ZgYsu+4A1d/v3/DGT5jzrP3tG/ezLLDh3l1zRrmz7IxVFRcHAdycymuro746TamUDNOqNuaNzKQlwdAf5AMfXzjjTf8un+32x0yPxjnwpGTQ5fNht0qyI3ZM6/JuUno7qY7Pl53jLBiXpN6dT77LACLrrtuWtvHxMUx/NWvkuZ28+b3vufPaIYPmfPMohRdN95IA7Dm97+f066GzjmHbLebI1u2+CZbiDKFmnFCo4WZbckSAIYbG3XGOS7BGh718ssvc84553D11VezZMkSPvGJT6CUYsuWLXzsYx87vv3LL7/Mh6zx0s8++yynnnoqJ510Etdccw29vb0AFBYW8v3vf58zzjiDv/3tb2zbto1PfOITrFmzhgGr82XYEaE5JYXUlhbdSUKeeU3OTcrgIAMpKbpjhBXzmtQrZtcuahwOMktLp/2cU2+/nWa7ndxf/xpMq/6QYM4zr/ZHH6WoqYkXTjuNknXr5rSvgv/zfwBouPdeHyQLXaZQM05o4OhRAJLWrwfAFYRdeMrKyrjjjjvYv38/1dXVbN26lQsvvJC33nqLPmsNuAceeIBrr72W1tZWfvjDH/L888+zY8cO1q9fzy9+8Yvj+4qJieH111/nk5/8JOvXr+f+++9n586dxMbG6vrr+V1ffj4FAwMMDg7qjhI2zGtyZpTHQ6bbjSsjQ3eUsGVek4FX0NxM/fz5M3qOLSaGgx/5CIsGBth64YV+Smb4SySfZ/X//d90Aafcddec91V01lmU2+0kbt0692AhbPIV5wzDMmLdQcs85RTcgDp27P0b3Hor7Nzp24OuWQMz6PazYcMG8qyhmWvWrKG2tpYzzjiDSy65hCeeeIKrr76ap556ip/+9Ke88sor7N+/n9OtJhrDw8Oceuqpx/d17bXX+vJvEhJsS5Ywf9cu9u3cyfKNG3XHmTvzmgw5XYcPkwKQk6M5iZ+Y12TEad6xg2y3mwNr1874uWfcfz/vvPIKa194gb9++ct8/M47/ZAwDJnzTJ+RERaUlfFGejqXrlkz592JCFX5+Zxz+DC43WC3zz1jCDKFmnFCHqswSystpVMEWxCutxUdHX38c7vdjsvlArw/5O666y7S0tI4+eSTSUxMRCnFhRdeyN/+9rcJ9xUfgXNkkjdsgAce4OhLL4VHoRYEzGtyZlr37CEFcJ6ghbkxe+Y1GVi1Dz5IFpB+6aUzfq7d6STtwQdpOOccrvz1r6m5+OIZr0dl6BGp51nDX/5CrtvN0BVX+Gyfng0biK+tpXPrVlLOOstn+w0lplAzTqytjX4gLi2NJocDR3f3+78fxOtcnHPOOdx444387ne/O35lauPGjdxyyy1UVVWxePFi+vv7qa+vp6Sk5APPT0xMpKenJ9CxAy777LMB6Hn3Xc1JfMS8JkNOrzUXNnaGw8RChnlNRpz+V15hBCi+5ppZPX/x2WdzbOdOZM0ajnz1q6ZQmw5zns1K86uv0rtzJ3lr1tBUVsZAbS0511/vvYg7TcfuuINYYP23v+2zXPOuuAIefJAj//hHxBZqZo6acUKOzk46rVvOvdHRxFgTXUOB3W5n06ZNbNmyhU2bNgGQmZnJvffey/XXX8+qVavYuHEjBw8enPD5n/70p7n55puDevKuL8SsWOEd1lperjtK2DOvyYkNWHfu47KyNCeJPOY16R/JBw9SGRdHrLW0zWxkrl7NzqVLWV9RQZP5+RzSgvU8O/A//0Pa2Wez6CtfIfrss1lw660sueMObBs30vbWWx98QmPjB5rcqJ4eivfsYev8+eQtXuyzbCuuvJJWYCSS13lVSmn5WLdunTJCw9vz5qmDMTHHPz8QG6v279+vOZV+E/0bANuUpnNqso/pnmtH4+LUluTkGfwLBBfzmgztf4OXvvhFpUAdeeqpaW0fbOfaROdZKP9/+Eqk/hu4hodVF6iXV6yY876OPPKIUqBq4+LUoTvumHu4GTDnWWiY7b9B+V13qUFQO6Oj1T8+8xn1+GWXqSevv15t+cEPVDuoiuRk5W5q8m7sdqs9p5+uFKjtF174/v38x38oBWrLf/zHXP8qH/BWYqI6kJjo8/0Gk6nOsxMOfRSRfOA+IBvwAPcopX41bhsBfgVcBvQDn1ZK7fBtSWnoEtvfT5/VYWg4MZHEtja6T/AcI/R0ZWeTU1ODy+XC4TCjoo3AGm5rAyAhO1tzEsOYu0NPPUUJYB/TGGK28j/8Yd4pKGDDkSNw663sbm5m1X//99xDGhGt4amnyL3lFqqdTtLffZfVK1e+7/tPHj7MBb//PR1FRbh+9jPaH3yQFVYHxjXPPUfza6+RdeaZAHj+9CdqRDjj3/7N5zn7CwtZvmcPHpcLWwS+N5nO0EcX8DWl1FJgI3CLiCwbt82lQLH1cRPwW5+mNLRKGBpiyJrQ6kpJIcXt1pzI8Af34sWUKEXNoUO6oxgRyNXZCUBibq7eIIbhA42PPQbA/A9/2Cf7W1tZyZPf/z7lDgfRd9yB8nh8sl9/EZEYEXlHRHaJyD4R+cDq3SJyjoh0ichO6+O7OrJGooH9++GjH6VbhOiXXyZvXJEGsOl3v+P+L36RYwMDZH3xiyx99VUeXLiQytdeYwhouf56UIrOp59mSUMD765dS0Jios+zOtesIQGoi9A2/Scs1JRSjaN3x5RSPcABYPxs7yuB+6w7eG8BKSISpj2WI0+Sy8VIUpL3i7Q04iHof0kYMxe3Zg2xQG0kjwU3tPF0dQHgMAteG2FAvf023cCCiy7yyf6cUVFsuv12Wj71KUoHBth6yy0+2a8fDQHnKaVWA2uAS0RkopbCryml1lgf3w9owgilhoZo2biRhKEhKn7yExaedtqk297461+TePgwf7n0Uu7bsIFNu3dTfMYZPHPhhaw8epRD11xD13XX0QKsvPtuv+TNsJqd1T39tF/2H+xm1ExERAqBtcDb4741H6gb83U9HyzmjBDkcblIUQqPNRnalpnpfXxkBO+w2sgUjn/3edYQhvY339ScZPbC8f9lukL97656enABjGltHQ5C/f9lLiL57z7v8GGqUlN9PlTr1N/+lqrYWLJ+/3uGgrhxi3XhfrTzmNP68NsLIpJfazP9u++66SYW9PTw0mc/yznf/OYJt59fUMAnN2/mX95+mzhrdNWFDz3E1rg4Fj30EPO6unj5M59h6cknzyr/iRRa3U773x5fekSGaRdqIpIAPATcqpQaP0VJJnjKB145InKTiGwTkW3Hxi+abASlrsOHsQNkZADgtOaPqP5+2traIvKHo1KKtrY2YmJidEfxqYR16wAY2btXc5LZiYmJMa/JUH5N9vXRb7OBTPTrJDSZ12SIvyZnydXbS3F/P+3FxT7ftyM6moFbb6XY5eKlL3/Z5/v3JRGxi8hOoAV4Tik10TvtU63hkVtEZPkk+5nyvaM5z6Z/nqmuLhb+5S+8npDApjncAYtPTCRvxw7+8qlPsf3hh/nYH/4w632dSEx2Noejokjcv99vxwhm07rUIyJOvEXa/UqphyfYpB4Yu0ppHtAwfiOl1D3APQDr16+PvDMqBHVVV5MKOObNAyDGWuNoZPt2enJyiNSCOyYmhry8PN0xfCs7mz67najaWt1JZiUvL4/6+nrzmgxRtv5+Bh0OknQH8SHzmgzt1+RsHXn8cRYCTh80EpnIiu99j5o77iDvvvtQ99yDBOnFDaWUG1gjIinAIyKyQik19krgDmCBUqpXRC4DHsXb62D8fqZ872jOs+mfZwe++12WeTx03XYbdmvZpdlaUFrKgvvum9M+pqtu/nxKDh9GeTyILbJWFptO10cB/gAcUEr9YpLNHge+KCJ/B04BupRSjb6LaejSe/gwANHWBP/4ggIAhmprKSoq0pbL8AMRWtPTybCuTAbrL//JOJ1O85oMYY6BAYaionTH8CnzmoxMrc8/z0Ig+7LL/LJ/cTppvewyTn7oIbY99hjrfdSwxF+UUp0i8jJwCbB3zOPdYz7fLCL/KyIZSqnWmezfnGfTNDxMyu9/z26Hgwt8uCh1ILhPOYV5NTUcefVVCs45R3ecgJpOWXo68CngvDGdeS4TkZtF5GZrm81ANVAF/A74gn/iGoE2UF8PQKx1tSaxsBCAkaYmXZEMPxpcsIBit5ujR4/qjmJEmKihIUbCbH6aEZlGduygC1joxzeUy6w26NV33um3Y8yFiGRad9IQkVjgAuDguG2yrZsBiMgGvO9J2wIcNWLU3X47uf397Lv+eqJDbEjy/GuuAaD2L3/RnCTwTnhHTSn1OhPPQRu7jQKCvgWRMXNDDd4RrAkLFgCQaq0474nQIQbhLmrlSvLffZcXduyIyCFLhj5RIyO4rfUaDSOUJR4+TG18PKv9eIc4fv16GmJjyX73Xb8dY45ygD+LiB1vAfagUurJ0Qv8Sqm7gauBz4uICxgArlORONEsEIaHifvVr9jqcHDpr3514u2DzMIrrqBdBF55RXeUgIusgZ7GjLlaWgBIsQq0mJQUegHa2/WFMvwmdaO3e3KzadFvBJDb7SbW7cYTF6c7imHMiVKKvK4uOvPzT7zxXIjQsHYtG3p7aa6p8e+xZkEptVsptVYptUoptWK09b5S6m6rSEMp9Rul1HKl1Gql1Eal1Bt6U4evA//1X6QPDdH8r/9KitXFO5TYHA4qc3JYEKJz6OfCFGrG1FpbcQNJY37pdNrtOKzFaY3wkrxhAwD9ZWWakxiRpKuriwSAhATdUQxjTpr27SNNKWxLl/r9WEnXXUcMsP///T+/H8sIXWpoiPhf/pKDDgeXheDdtFEjGzawwOXiSPDeRfYLU6gZU7J1dNAh8r61YHqioojq6dGYyvAXKSnBA0hlpe4oRgTp7OwkEZDERN1RDGNOmrduBSBu1Sq/H2vRpz/NEDDw6KN+P5YRurZ+9KMUDA5y+JZbiAnh4eU5H/0oAFX/3/+nOUlgmULNmJKzu5tup/N9j/XHxhLb368pkeFXsbG0JyaS0tgYkWvSGHp0dnaSANiSkwNyPBG5RETKRaRKRP59gu+fIyJdYxpofTcgwYyQ17dzJwCpflr8dyx7YiIHFy5kXXk5Hc3Nfj+eEXoO/PnPrH/qKd7MyeGiX/5Sd5w5KfrIRxgGBl56SXeUgDKFmjGl6L4+esd1YhuKjydhaEhTIsPfevPzWTQyQmOjWWHDCIyOtjbiAWcA5k5YzQ3uAi4FlgHXi8iyCTZ9TSm1xvr4vt+DGWHBXV6OB8g57bSAHC/h1lvJAt78j/8IyPGM0DHS0cG8G2+k2W6n9KWXQm7JnfFscXHUpKUxv6JCd5SAMoWaMaX4gQEGxk3wH0lOJsnl0pTI8Df78uWUAvt279YdxYgQPS0t2ICotLRAHG4DUKWUqlZKDQN/B64MxIGN8Oc8coRGm43YADVsWPSFL9DsdJLw4INmFITxPru+/W3S3W7qvv990kpLdcfxidYzz2TN8DDVL7ygO0rAmELNmFLiyAjD4+aNqNRUUpTCY4o1nxCRNBF5TkQqrT8n/A0vIrUisscairXNX3lSTj2VWKDOdH40AqTfGrYVnZ4eiMPNB+rGfF1vPTbeqSKyS0S2iMjyQAQzQl9iaytNgWyKY7dTd8EFnN7Tw+6nngrccY2gl3j//Rx0Ojn1m9/UHcVniq2Fuqv/8z81JwkcU6gZU0pxu3GPmzciGRnYga7Dh/WECj//DryglCoGXrC+nsy51lCs9f4Kk2h1fuyNsM5Khj791jIgsZmZgTjcRON/xt+K2AEsUEqtBn4NPDrhjkRuEpFtIrLtmFlb0gDm9fbSnZER0GOW/PjH2IH6n/0soMc1glftP/5BaU8Phy+9FLvjhEsmh4x5Gzbw9rx5rHvzTTwDA7rjBIQp1IxJDbS3Ewcw7iq3IysLgM6qqsCHCk9XAn+2Pv8z8GF9UQCrrbQcPKg1hhE5BltbAYgJTKFWD4xd5CoPaBi7gVKqWynVa32+GXCKyAfefSul7lFKrVdKrc8MTHYjiLm6u5nnduPKywvocZNWr6Y8MZH8d94J6HGN4NX0X/9FL3DSL36hO4rPjfzLv5Dq8VB2zz26owSEKdSMSXUeOgSAbdwbkKicHAB6zR01X8lSSjUCWH/Om2Q7BTwrIttF5Ca/pUlLozsuznR+NAJmuL0dCFh7/neBYhEpEpEo4Drg8bEbiEi2WDPvRWQD3t+VbYEIZ4SuprfeAsChYT5Qy7nnsmpwkMMvvhjwYxvBpe/oUVbt3887ixaRuWiR7jg+d9KXvwxA28MPa04SGKZQMybVXVMDgNMqzEbFWYtfD9TXBzxTqBKR50Vk7wQfM2licLpS6iS83epuEZGzpjjenIZk9eblsdjl4siRIzN+rmHMlKujw/tJAOb2KKVcwBeBZ4ADwINKqX0icrOI3GxtdjWwV0R2AXcC1ylz1cI4gVZruHhSANZQGy//618H4EgIL2hs+MbeH/6QOCDFek2Em7j8fKpjYkjcu1d3lIAIn4Grhs/113nn28fOf/88+4QFCwAYNu3bp00pdcFk3xORZhHJUUo1ikgO0DLJPhqsP1tE5BG83etenWTbe4B7ANavXz/jN5iybBnLKip4fc8eFlj/34bhL+6uLu8nAWrCYA1n3DzusbvHfP4b4DcBCWOEjX7rjeO8jRsDfuzCM8+kMiqK2NdfD/ixjeBie/JJjtpsrP7sZ3VH8ZuWhQsp3r+fkeFhnFFRuuP4lbmjZkxq8OhR4L07aKNSrFvprpYJ6wlj5h4HbrA+vwF4bPwGIhIvIomjnwMXAX67nJR86qkkA0fefttfhzCM4zzd3d5PAjP00TD8wlNVRR+Qu2aNluM3rVzJ8vZ2us3i1xHLNTjI0vp6yktKwqqJyHj2M84gAyiPgE6nplAzJjXS1ARAUlHR+x5Pys/HBWA1ADDm7CfAhSJSCVxofY2I5IrI6FX/LOB1ayjWO8BTSqmn/RUobt06APq2+W0VAMN4T2+v989AtjU3DB+LbmjgaFSUtjfIKddeSyyw+zfmZnCkqvrHP0gAoi66SHcUv8r9yEcAaH70Ub1BAsAUasakPNYds9TFi9/3uNhsdIhgG51XYsyJUqpNKXW+UqrY+rPderxBKXWZ9Xm1Umq19bFcKfUjv4ZassT7p+n8aASA9PV5PzGFmhHCUjo6aBu3nE0gLb35ZgaA/oce0pbB0OuY1WCj6FOf0pzEv3IvuIBuESQCOp2aQs2YlLS30wtEJyV94HvdTifO0eFKRvjJzWXQ6SSxocF0fjT8yu12I729uG02CPO5BkYYU4qcgQEGsrO1RXAkJnIgJ4clFRUoj0dbDkOf6HffpdbhYP56vy21GhTEbudQWho5tbW6o/idKdSMSdm7uui02yf8Xl90NDGjV8GN8CNCd3Y2hcPDNFlDYA3DH44dO0Y8MBIdDTLRWtSGEfy6Dh0iAVDjpgoEWt+ll1LgdlP5179qzWEEnvJ4WNzYyOFxfQXCVffy5ZQMDtIT5o3tTKFmTCq6p4eeSa5wD8THEzc4GOBERiB5iospBfbv3687ihHGmpqaSAA88fG6oxjGrDW98QYAscuWac1R/PWvMww0/PKXWnMYgVf/+uukeTyoU07RHSUg4s47Dztw6B//0B3Fr0yhZkwqtr+f/tjYCb83nJhI0vBwgBMZgRR30kkUApW7dumOYoSxxsZGEsDMTzNCWmdZGQCpJ52kNUf20qXsyMtjVVkZrqEhrVmMwDpiNdbIvvxyvUECpPCaawDofO45zUn8yxRqxqQShocZmuQqtzs5mRQzBj6sJVqdH9tNi37Dj5qamkgE7BPMhTWMUDFkNV7KPf10zUlArr6aNKXYe++9uqMYATT85puMAEUf+pDuKAGRuWwZdXY7UWF+MdkUasakkl0uRibrYJWeTizQb1r0hy2xOj+O7PXbcm2GcfyOmiM1VXcUw5g1e20tzSIk5+bqjsLim2/GA/SY7o8RJbGykkOxsURr7DwaaHXZ2eSZOWpGJHIPD5OsFGqSN0+2efMA6Dx0KJCxjEAqLgYg5vBhzUGMcNbU1ESyzYY9gt5cGOEnvqWF5rg43TEASC8tpSoqitgwv9NgvEd5PBS2t3MsL093lIAaXLWKApeLjooK3VH8xhRqxoQ6a2qwAZKRMeH3o6wWxD0R0Bo1YsXH05WSwvy+PjrMmnmGnzQ2NpJkt5s5akZIS+/upis9XXeM41ry81lw7Jhp0x8hmrdvJ0Mp3KtX644SUEnnnw9ATRg3FDGFmjGhrupqABxZWRN+P2b+fAD6jhwJWCYj8IYWLKAUqAjjq1WGXk1NTaQAmDlqRohy9fUx3+ViOIjuZsiGDWQqxeHXXtNzfJEYEXlHRHaJyD4R+d4E24iI3CkiVSKyW0T0dmIJYUeefBKA1HPP1ZwksIquvho3MPDKK7qj+I0p1IwJjRZgUTk5E34/vqAAgMGGhoBlMgLPuWIFpcDBAwd0RzHC1LGGBlJGRkDjQsGGMRdHX30VG+BYvlx3lOMyLr4YgHrrDbwGQ8B5SqnVwBrgEhHZOG6bS4Fi6+Mm4LcBTRhGut96C4CFmzZpThJY6QsWUOVwEL9vn+4ofmMKNWNCA/X1AMQvWDDh95MXLQLAZRZDDmtJ69eTBBzdsUN3FCNMeUYngk9yUcgwgl2rtYZayoYNmpO8p/BDH8IDDGnq2qu8eq0vndaHGrfZlcB91rZvASkiYn4QzIIcPEiL3U6idRE9khzOyaGouRncbt1R/MIUasaEhq03TwmTFGopCxcC4Dl2LGCZjMCzL10KQL+ZlG74QU9PD0kDA94vzB01I0T179wJwPxzztGaY6zotDSOREURq3HYuojYRWQn0AI8p5QaXzXOB+rGfF1vPWbMUFpTEy1BNEcykHrWriXZ7WZo927dUfzCFGrGhFzNzQAkWwXZeFEJCXQD0t4ewFRGwFmdH21VVZqDGOGoqamJ45fPzR01I0TZDh2iRYR0a6RJsGjOymK+xiV0lFJupdQaIA/YICIrxm0iEz1t/AMicpOIbBORbcfMxeEP6OrsZNHwMEOTvF8LdymnnQZA/QsvaE7iH6ZQMybW1sYIkDTF5OguhwN7V1fgMhmBV1CAy2YjsbkZd5gOKzD0aWxs5Ph9NHNHzQhRiY2NNMTHIzJR3aHPcEkJ+W43XZrXmVJKdQIvA5eM+1Y9kD/m6zzgAxPflVL3KKXWK6XWZ2Zm+itmyKp4+WWSgKg1a3RH0aLQmo/ZYQ1BDjemUDMmZOvooFMEsU3+EumJiiK6pyeAqYyAczjonTePhW43h816aoaPve+O2iQdZg0j2GV3d9MZhK/fmHXrsAGHn3464McWkUwRSbE+jwUuAA6O2+xx4F+s7o8bgS6lVHivXuwHzS+9BEDmWWdpTqJH0apV1Ivg2b9fdxS/MIWaMSFnTw/dTueU2/THxhLb3x+gRIYu7kWLKAHKy8t1RzHCzOgdNU9aGkRF6Y5jGDM20NTEPI8HV1GR7igfkHXeeQC062nRnwO8JCK7gXfxzlF7UkRuFpGbrW02A9VAFfA74As6goa6AavZV1aEteYfZbPZaExKIvHoUd1R/MKhO0CkcblcfOtb36L1BOPGRYRbbrmFdevWBSjZ+8X09dEbEzPlNkMJCWSaoY9hL3blShZv3coLBw5w6aWX6o5jhJGmpiZOEUHM/DQjRB195RUWA9ErV+qO8gF555zDMODW0GRBKbUbWDvB43eP+VwBtwQyVziKqa6my24nOQjv6gZKX0EBS/bsweN2Y7PbdcfxKVOoBVhZWRk///nPmTdvHjFTFEJHjx5FRPjDH/4QwHTviR8cpCMlZcptXElJJJsFr8Ne7KpVCNBsWvQbPtbY2Ei+w2EKNSNktVvrV6VtHL9EmH626GiOxMQQb4ath7XM1laa09JIDrI5koHkWLmSxD17OPz22yywmouEC1OoBViF1Sr35ZdfZqnV+nwiZ511FpWVlYGK9QGJw8M0JyZOuY1KSyNFKVyDgzhOcPfNCF1SWgrA8N69mpMY4aapqYkcEdNIxAhZw3v24AHyg3TYWWtWFrnWuqhG+Ont7WXR8DD1Ebh+2lgZp58Of/0rdc8+G3aFmpmjFmAVFRXYbDYWnqCNaklJyfGiLtCUx0Oqx4P7BHfUJCMDgM6amgCkMrSxWvQ7zP+z4WONDQ1kuFymNb8Rshw1NdTZ7SQFaTfCkZISCtxuOk2xFpaq336bTMC2YvzKB5GlwOr82Lttm+YkvmcKtQCrqKigsLCQ6OjoKbcrKSmhubmZLg1zwPpbW4kBOMHiiQ5rPHS3eQMf3ubPZ8ThYF53N93d3brTGGFkoLGRKI/H3FEzQlZKSwtNSUm6Y0wq9uSTAah58knNSQx/aHnlFQCSTjlFcxK94hYupFsE56FDuqP4nCnUAqyiooKSkpITbje6jY7hj53WC90+b96U20Xn5gLQa8a/hzebjf758ykBbXd5jfDjcrlwjDZVMnfUjFCkFPP7+ugJ4tfvgg9/GIC255/XG8Twi0Fr7njO+edrTqKZCHUJCaRoXjPQH0yhFkBKqRkXajreGPfU1gLgPMFV7rh87zqVA2ZIRdiTkhJKMS36Dd9paWkxi10bIa330CESlcKzaJHuKJPKXL+eDpsNW1mZ7iiGHzgqKugVIcaaohDJujIzyert1R3D50yhFkBNTU309vZSajVnmMqiRYuw2Wxa3hj319UBEJuXN+V2iYWFAAyH4RUM4/3i1q5lIVAVpgtKGoHX1NT0XqEWxHckDGMyDS+/DEDs6tV6g0xFhCMZGcwzF1TDUkpTEw2JiRDBHR9HjSxYQK7bzUBHh+4oPmUKtQAaLbqmc0ctOjqawsJCLXfUBq0f6PEn6CKUbDVEcbe0+D2ToZdjxQocQMf27bqjGGGisbGR4+WZuaNmhKBuq3FBxqmnak4ytcHlyykZHqbZLKcTVpRSFPT20mlNQ4l0zmXLsAFH9Szw7jemUAug0aJrOoXa6HY6CrWRpiYAkoqKptwuMTeXEYC2Nv+HMvSy7gKrgwc1BzHCxegdNRUVBcnJuuMYxowNHzzICJB/+um6o0wp4ayziAKqH39cdxTDhxoOHCBXKdzTGKUVCZLXrQOgzVrbMFyYQi2AKioqiImJIe8EQwpHjRZqSik/J3s/ZU3wTznBEgJis3nHvnd2BiCVoZX1iyDh6FE8Ho/mMEY4OH5HLTvbDNsxQpL9yBHq7XYSgvxCQ87llwPQa3UINMJDwwsvABBnFSiRLufMMwEY2LdPcxLfMoVaAFVUVFBcXIzNNr1/9pKSEnp7e2my7nAFirS30w1EJSSccNtup5Mo07I9/CUn05+UxCKXizprDqNhzEVTUxN5Dgdihu0YISqxtZXWxETdMU4obf16ukWw792rO4rhQz1vvw1A1jnn6A0SJFIXLaJDBHuYteg3hVoATbfj4yhdnR8dXV10ORzT2rYvOpqYvj4/JzKCwXBRken8aPhMY2MjeTabaSRihKx5fX30nWAZm6AgQn1iIslHj+pOYviQOniQISBr40bdUYKCiHA0Npb4AN/c8DdTqAWIy+Xi0KFDIVGoRfX20hMVNa1tB+LjiR8c9HMiIxhErVxpCjXDZ5qamsg0i10bIaqvuZkMjwdldT8Odl15eeT39Jih62Ekrq6OupgYxOnUHSVodGZkkNnVpTuGT5lCLUBqa2txuVwzKtTy8/OJjo4OeKEWNzBAf2zstLYdSUwkcWTEz4mMYBC7Zg0ZQN3OnbqjGGGgraGBZJfL3FEzQtJRqzV/1IoVeoNM17JlzAPqzc/vsJHV0UFbRobuGEFlOC+PHJcL18CA7ig+Ywq1AJlpx0cAm81GcXFxwAu1hKEhhqYxPw3AnZJCqseDMlfpZk1ErhGRfSLiEZH1U2x3iYiUi0iViPx7IDMCyJIlAAzu2hXoQxthRimFZ3T9RXNHzQhBHe+8A0Dqhg2ak0xP0hlnAHD0ySc1JzF8YbCnh/yREYZC5I5uoDhKSnAAjdb8vXBwwkJNRP4oIi0iMuEsVBE5R0S6RGSn9fFd38cMfbMp1Ea3D3ShluJy4UpKmt7G6elEA31mLbW52At8BHh1sg1ExA7cBVwKLAOuF5FlgYlnsTo/RlVXB/SwRvjp7u4mdWjI+4W5o2aEoOE9ewCYf/bZmpNMz4KPfQw3MPTii7qjGD5w5KWXcALOlSt1Rwkqidbi88ciqVAD7gUuOcE2ryml1lgf3597rPBTUVFBamoq6enpM3peSUkJhw4dwuVy+SnZ+7kGB0kGVFratLa3WxOpO8Osy04gKaUOKKVONPFrA1CllKpWSg0Dfweu9H+6MQoLcdvtZHZ00GcayBhzMLqGGmDuqBkhyVFTw1GbjeQQef0m5ORQGRNDslVgGqGtdetWAFJNI5H3ybIWn+/ZvVtzEt85YaGmlHoVaA9AlrA22vFRZrheUElJCSMjI9TW1von2DgdVsElmZnT2j7Kaq3dE6B8EWw+MLYvfr31WOA4HPTm5FBK4BvcGOHl+BpqYO6oGSEpqaWFpmlOEQgWTYsXU9zezkgYzd+JVKNTEPLOP19zkuCSvW4dQ4CqrNQdxWd8NUftVBHZJSJbRGS5j/YZVmbamn9UoDs/dtfUAOCc5lXCWGvx7n6zttaUROR5Edk7wcd074pNVOFPuhK6iNwkIttEZNuxY8dmF3oipaWUAgcPHvTdPo2IM3pHTYlAKLQ3N4xxcnp76c7K0h1jRuIuuogEYM999+mOYsyRo6qKZpuNhPmBvV4b7GwOB0eio4kLo/ekvijUdgALlFKrgV8Dj062od/ePAa5vr4+6urqKLXm+MzE6HMCVaj1HTkCQPQ0F6GNLygAYKihwW+ZwoFS6gKl1IoJPh6b5i7qgfwxX+cBk/6jK6XuUUqtV0qtz5zm3dHpiF+7lkVA5YEDPtunEXlG76ip9HQwraWNEDPQ0ECax4O7qEh3lBlZcvPNALQ9+KDmJMZcpTQ30zDdXgIRpjkjg+y2Nt0xfGbOhZpSqlsp1Wt9vhlwisiE/UL99eYx2FVVVQEzbyQCkJ6eTmpqasAKtYH6egDi8vNPsKVXkvWLamS0g5vhL+8CxSJSJCJRwHXA44EO4Vi+nCigY8eOQB/aCCNNTU3kiiBm2KMRghpe9fZ9iloeWgOIkoqLqYyJIdV07g1pyuMhv6+PHnM3bUIDRUXkjYwwEibrqc25UBORbLEmXonIBmuf4VPK+sBsOz6Cd6X1QHZ+HLYKrsRptnxNXbQIANXa6q9IYU9ErhKReuBU4CkRecZ6PFdENgMopVzAF4FngAPAg0qpfQEPa7Xo95g7asYcNDY2ku90mkLNCEkd774LhE5r/rGaCgoobG83S+qEsNYDB0hVCs8s3lNGAsfq1diAhhde0B3FJ6bTnv9vwJtAqYjUi8iNInKziNxsbXI1sFdEdgF3AtcppSadOxOJRousxYsXz+r5gSzU3Fab/eSFC6e1vSMmhi5A2k2/mdlSSj2ilMpTSkUrpbKUUhdbjzcopS4bs91mpVSJUmqRUupHWsJaQ3Hj6+rwmF/0xiwd7/oYIh3zDGOsob3e1YryzjpLc5JZOOkkMpSi7o03dCcxZqnBWmIhft06zUmCU7q1ZmCb1Rkz1E2n6+P1SqkcpZTTejP5B6XU3Uqpu63v/0YptVwptVoptVEpZc7+cSoqKsjLyyM+Pn5Wzy8pKaGuro7+/n4fJ5tAWxvDQMIM3kB1Ohw4wuQWs3ECqakMJCRQNDJCXRhN1jUCq7GhgfSREdPx0QhJ9poa6m02Uqc5lzuYpF90EQD1j013evTsiEi+iLwkIgdEZJ+IfGWCbcw6vLPQbd3RzQqRNfwCreDcc3EDg2HSot9XXR+NKcy24+Oo0eeOznXzJ1tnJx02G2Kb/kujNzqa6N5eP6YygsnwwoWUAvv2BX7kpREehhobcSpl7qgZISmpuTnkWvOPWvjhD+MChvx/t8EFfE0ptRTYCNwiIssm2M6swztDav9++oD5p5yiO0pQSsnKos5uxxEm6/uaQi0AfFWoBWL4Y1R3N90z7MLWHxtLnFmXJWLErFplCjUfGerupuaZZzj84osRM2dkZGQE5+hQaXNHzQhB2b29dIfoshIxqalUx8QQ7+f3E0qpRqXUDuvzHrxzq033Cx+Iq6vjcEwMdtMxd1JNycmkWFN5Qp0p1Pysra2N9vb2ORVqo3PbysvLfRVrUjH9/fTFxMzoOcMJCSQMD/spkRFsolevJguo3r5dd5SQV7Z0KUWXXMKC88/n1euu0x0nIJqbm8kb/cIUakaIGWpqIs3jwTXNhlvBqDUvjwXt7QSqnYCIFAJrgbcn+LZZh3eGsjo6aIugzumz0Zeby/y+PgiDlhmmUPOzuXR8HJWQkMD8+fMDckctfnCQwbi4GT3HlZxMssvlp0RG0LEaigzs3Kk3R4hTHg+LGhvZkZpKk82G8+2J3sOEn6amJlaNfhFi7c0NI1Rb84/lXrWKLKVoCsDPcBFJAB4CblVKdY/79rTW4Y3UNXgnMtLdzfyREYZD+EJBIKiSEuKBDqvxTygzhZqf+aJQG31+IAq1pJERhme4iKJKSyMZGAlEsxNDP6tQc1ZXm86Pc9C8cyeZStFz7rkcnjeP7KYm3ZECorGxkbXAUFYWpKfrjmMYM9LxzjtAaLbmH5V87rkA1D3u36U4RcSJt0i7Xyn18PjvT3cd3khdg3ciDS+9hA1wrFp1wm0jWezKlQA0h0F3U1Oo+VlFRQUOh4PCOV79CEShpjweUj0ePCkpM3qeZHh/rnZWV/shlRF0iorw2O0UjYxQU1OjO03IGn2TlHLuuQwsWULh8DC9EVCsNTU1sRbwmDcaRggaDOXW/Jaiq64CoO/11/12DGt93T8AB5RSv5hkG7MO7wy1vfYaAKmnn645SXBLtxqtdO3YoTnJ3JlCzc8qKipYuHAhzjlO+iwpKaG9vZ22Nv/9DOttaiIKZnyV22l1busyhVpkcDoZysujFNgbBsMKdBl9k1T04Q8Te9pp2IAaP7fMDgathw9TCkSZjmVGCHLU1FAvQtr80O2LkTh/PocdDmIOHvTnYU4HPgWcN6b9/mVmHd65GdqxAxdQcP75uqMEtfzTTmMEcAWgt4O/mULNzyoqKii1horNxeg+/HlXbbTQss+wm1W0tZZM35EjPs9kBCfH8uWm8+McxRw4QK3TSVJeHvlXXAFA+wsvaE7lf479+7EB9vXrtWUQkUtEpFxEqkTk3yf4vojIndb3d4vISTpyGsEnobmZxoQErBtBIaspPZ301la/7V8p9bpSSpRSq8a0399s1uGdG2dlJTUOBykh2nU0UOKTk6mz23GGwftSU6j5kcfjobKycs7z0yAwLfq7rUItaoad2OLy8wEYPHrU55mM4ORcsYJiYF+YLCipQ25LC41ZWQDknHwybSJIBPx7Jo2ubbN2rZbji4gduAu4FFgGXD/B+k6XAsXWx03AbwMa0gha2T09dIXBm+SB/HwKBgdxm47NISWjpYWWjA9M4zMm0JKYSHIYNJ8xhZof1dfXMzAw4JNCrbCwEIfD4ddCrb+uDoDYvLwTbPl+idb8u+HGRl9HMoJVaSnRQEdZme4kIanr8GEKXC6GlnnrA7HZqE1NJcM6B8NZdlOTd61G6wKPBhuAKqVUtVJqGPg7cOW4ba4E7lNebwEpIjKntQR6Ghrm8nQjCAy3tIR8a/5R9uXLiQGOhkGzhUgx1N1N/vAww4sW6Y4SEnqyssgOgxb9plDzI191fARwOp0sXLjQr4XakPVGIr6gYEbPS7F+aLjDZHFBYxrGdH50maUZpqW6upqHHnqIhx56iKd+9CMAEs488/j3exYtYlF/P29+7WtUb9miK6bfFXV2UpeeDvqGjs0HxlbE9XxwId7pbDNtL59yCg2LFkVEs5hw1mg1cohaulRzkrlLtrpWNlvLDRjBr/bpp7EDMSeZkdjT4SkqIlmpkB/tZQo1P/JloTa6H38Waq7mZgCSiopm9Lz4efMYAvBjoxMjyFiF2kKXi6qqKs1hQsPHPvYxrr76aq6++mre+d3vACi0uq8BxF5wAdHAqb/4BbYrx9/gCQ/K46F4eJg2vY0YJqoQx19ync42017fKfHKK1k8OMjek07CYy5shKz2d98FIGXdOs1J5i7/4ot5tbSUhIULdUcxpqnFmsM878ILNScJDdHWWoeNfuxuGgimUPOjiooK4uPjyZnhnK/JlJSUUFlZ6be1q5Q1sTh1hrfVxWajw2bD3tnph1RGUMrIwJWcbDo/TtPQ0BC7du3ic5/7HLt37+Y/P/Qh3FlZZIxZNHfDD39IzdNP8/K6dRSOjNAZhksfdB0+TCyg9BZq9cDYcZd5wPhxidPZZtrrO6379rd5/cor2djYyCvWGlZG6Bm0mifljrkTHqpSFy3irIMHWfrJT+qOYkyTa8cOhoAFF1ygO0pISLEaVnVYF1hClSnU/KiiooKSkhKfdYcqKSlhYGCA+vp6n+xvPGlvpwtwxMTM+Lk9TifOnh7fhzKClixdyhJM58fp2LdvHy6Xi/PPP5+VK1eSWluLfdxVebHZKLr4YhKsu2w1jzyiI6pftVmvFae++WkA7wLFIlIkIlHAdcD4lX8fB/7F6v64EehSSs1pEu5ZDz/M68XFnPv667xx661z2ZWhia26miYgy9yFMjRIqKmhNjYWR2ys7ighoeCss/AAA3v26I4yJ6ZQ86PRQs1X/N350dHdTafDMavn9sXEENvX5+NERjCzr1jBKpvN3FGbhjKr6cratWthcBD275+06+GCD38YgK5XXglUvIDptta0idM4GV4p5QK+CDwDHAAeVErtG7e+02agGqgCfgd8Ya7HFZuNDdu3sycxkTW/+hX7//KXue7SCLD4piYa4uJCvjW/EZryOzpotZZDMk4sLTeXozYbEuKjU0yh5ifDw8PU1NSEVKEW3dtLb3T0rJ47GB9P/NCQjxMZQW35ctI8Hhp37dKdJOiVlZWRmJjIwoULYe9ecLsnLdQyly+n0WbDEeJXASfSby0BkuTDn4uzYa3nVKKUWqSU+pH12Nj1nZRS6hbr+yuVUtt8cdyoxESy33iDDrudlBtuoGnnTl/s1giQjO5uOtPTdccwIlBbeTnZHg8jYdDIJpCak5JICfEmTqZQ85Pq6mo8Ho9PC7Xc3Fzi4uL8VqjFDQzQP8tb6sNJSSSNjPg4kRHUVqwAIPbQIYZMkT6lsrIy1qxZg81mg9ElDaZYR6wuI4OsMGznPmItPppuvXYiUeaKFfTdfz/JHg8tZ57JgJnbGxI8vb1ku1yMzLArsmH4Qr3VCTjhtNM0Jwkt3fPnU9DbG9It+k2h5ie+7vgIICJ+7fyYODzMcELCrJ7rSUkh1eNB+anRiRGErEYYSzwev3YjDXVut5tdu3Z5hz2Ct1BLSoIpuqv2l5RQNDTEQHt7gFIGSFMTg0CS3jlq2pVcey17v/51VvX2sm3NGjxut+5Ixgk0WG+UbatXa05iRKJuq3Ph/Esv1ZwktLiXLiUBaA/h0QumUPMTfxRqo/vz15viZJcLV0rK7J6ckYET6PZToxMjCGVn40pOZgWm8+NUqqqq6Ovre3+htmbNlOuIxZx6Kg6g+rHHApIxUBxtbRxzOBCb+dVzys9+xmsXXcSZhw/z0hln6I5jnEDL008DkH355ZqTGJHItm8fx0TINhcKZiT+5JMBaLKWNghF5reln1RUVDBv3jxSZlv4TKK0tJSamhqGh4d9ut/h3l6SAJWWNqvnO7KyAOiy5qAYEUAE24oVplA7gdFGIme4XPBf/wW7dk057BEg13oz2Pb88/6OF1BxnZ10zaKrbLg6Y8sWti5dyvlvvcWL11+vO44xBfe779IClJ5/vu4oRgRKq6/ncFKSaWQzQznnnQdA7zvvaE4ye6ZQ85Py8nKf300D7x01j8dDtY8Lok5rfzLFWkBTibLWius9fNhnmYzgZ1u1ipU2G/tMoTapsrIynE4ni372M/je92BkBC6+eMrn5J95Jr3ASJg1FEns76c3MVF3jKAhNhsbd+xg+7x5nPX3v/PG7bfrjmRMIq2mhqqkJKJm2XDLMGZLjYxQ2NtLp5kfOWMFa9fSCiir43AoMoWan/i6Nf8of3V+7LbalzqtO2MzFZuXB0B/XZ3PMhkhYPlykjwe2nbv1p0kaJWVlXHy0qVIZeV7hdoJ5hmIzUZnbCzuo0cDlDIw0oeHGZ7lXftwZY+JYenu3RyKi2PVD3/I7nvv1R3JGEcNDLCgt5dOs36aoUHTiy8SC3hOOkl3lJBjt9upi40lLoR/l5pCzQ+6u7tpamryS6FWXFwM+L5Q67O6scXMnz+r58dbV3qGwrBTnTEFq3tffG0t/f39msMEH6UUZWVlbMrP93adOsGQx7GG0tKI6ejA5XL5MWHgDHV3k6YUnlleDApncVlZZLz9Nl0OB1mf+QzVL72kO5IxRuMzz+AA7Bs26I5iRKCmJ58EINM0EpmV9nnzyArh7rqmUPODyspKwPeNRABSU1PJzMyk3Me3cQesJiBxs+zGlmxdaXQ1N/sskxECrM6Py4GDBw/qzRKEjh49SmtrK6eNLnsxg0LNnpvLPKV8fq7r0rpvHwD2WV4MCnfpK1bgevxxYgDXxRfTWlWlO5Jhad68GYDsyy7TnMSIRK633qILKDGvv1lxFRUxz+1mpK1Nd5RZMYWaH/ir4+Mof3R+HLEWBEwsLJzV81OKivAAqrXVd6GM4JeRgSsjg+WYhiITGW0ksmRgADIyYAZFSkJxMdlj9hHqOq1CPnqWP2MiwYJLL+Xob35D4cgItevXM9jTozuSAbjfeYc2oPSii3RHMSJQclUVB+LiiDfze2clauVKAI6+/LLeILNkCjU/qKioQERYtGiRX/bvj0LN3dICQMosM9ujougSQTo6fBnLCAG2lStZKcI+646J8Z6ysjJEhIz6eu/dtBl07EpdupQUYE8Id6saq9caaZCweLHmJMFt2Re+QNkXvsD6ri5eW7EC18iI7kgRL6WmhoqEBGJG74wbRqAMD7Ogs5PWBQt0JwlZ6dYi4W1bt2pOMjumUPODiooKFixYQIyf2lCXlJTQ1NREd3e373ba1sYgEJeRMetddDkcOLu6fJfJCAm2lStZLsK+MOtQ6As7duxg2eLF2Pfvn9GwRwC71aCn7t13/REt4IasjrCpy5ZpThL8TrnrLt69+GIuPHKEhzduxOPx6I4UsdTgIAXd3XRMsUC9YfjLsZdeIhoQaz0wY+YKzjsPFzC0a5fuKLNiCjU/8FfHx1Gj+x6dC+cL9s5OOmy2OS1E2xsVRXRvr88yGSFi+XLiPB46TefHDygrK+PyoiJvp8cZFmpkZwPQtncvSik/pAssz9GjeIAMU6hNy8lbtrB35Uo+tmMH/9+mTWHxGghFLS+8QBTmjbKhR8PjjwOQZRZan7WUefOotduJOnRId5RZMYWajymlAlao+XL4Y1RPDz1RUXPax0BcHHEDAz5KZIQMq/NjytGjvr3LG+La29s5cuQIZycleR+YaaFmrU0Y39vL4TBYn9DW0kKbCM64ON1RQoMIy99+m+rcXD6xZQsPXXut7kQRqclqJJJlOu4ZGoy89RbtwFLTSGROmlJSSLem+IQaU6j5WEtLC93d3X4t1BYtWoSI+LRQi+nvp2+OQzWHEhNJHB72USIjZIzp/OjLu7yhbrQJyPKREYiPh5nOzbLuqOUAh0L0SuBYUV1ddM3xYlCkkdhYCvfv59C8eVz1j3/w2DXX6I4UcUbeeosOoPSSS3RHMSJQSlUV5QkJxCck6I4S0nry88kbGPCObgkxplDzMX93fASIjY2loKDAp4VawuAgg/Hxc9qHOzmZZLfbR4kih4hcIyL7RMQjIuun2K5WRPaIyE4R2RbIjFNKTmY4K4sVQJVpKX7caKGW29QEq1eD3T6zHWRkoGw2soEmqytrKIsaGKDfFGozZktOZnFlJQezs/nQP//JY1deaYZBBlBCdTWVcXHmjbIRcGpggAXd3bSZhdbnTJYuxQl0bAuet07TZQo1HwtEoTa6f18WakkjI4zMsfWrSksjERg289Rmai/wEeDVaWx7rlJqjVJq0oJOB9uqVSwnPO78+EpZWRl5ubk49+2b+bBHALsdNW8eOUBjY6PP8wVa7OAgg6Zr3qzYk5JYUlnJvvnzufLxx/nn+eebBiMBoNxu8rq66Cwo0B0l5IhIvoi8JCIHrAuRX5lgGxGRO0WkSkR2i8hJOrIGq6ZnnsEJODZu1B0l5CWdcgoAR194QXOSmTOFmo+Vl5cTHR1NgZ9/sJeWllJRUeGTK6vK4yFVKTypqXPajy0zE4AOc1dlRpRSB5RSIb2qsWPVKpYCh3y8bEQoKysr49KSEujtnV2hBkhODvNttrC4oxY/MsKImZ82a/aEBJZXVLCvqIhrXnqJx5Yto99cFPOr5nffJUEp7KtX644SilzA15RSS4GNwC0iMr6T0KVAsfVxE/DbwEYMbk1PPAFAzoc+pDlJ6Cu2/g27Xn9dc5KZM4Waj1VUVLB48WLsMx3mNEMlJSV0d3fT3Nw8531119XhAEhPn9N+HNacmu6amjlnMiakgGdFZLuI3KQ7zPssX04s0G/WUgOgv7+f8vJyzk9L8z4wh0It3+EIiztqiW43LrNg65zY4uJYdvAgu049lavKy3kzP58Gc2HMb44+8wwA6WedpTlJ6FFKNSqldlif9wAHgPnjNrsSuE95vQWkiEhOgKMGLc8779AMLLngAt1RQl7mwoVUORxEheAyQqZQ8zF/d3wc5cvOj53WcDVHVtac9hOTmwtA35Ejc84UbkTkeRHZO8HHlTPYzelKqZPwXoW8RUQmffcgIjeJyDYR2Xbs2LE55z+h4mIAbNXV/j9WCNizZw8ej4c1AA7H8YYrM5adTRahP0fN43KRpBQqOVl3lJAnUVGs3rqVfTfeyLmdnbQsW8aBV6czatqYqX5rsfkC0/FxTkSkEFgLvD3uW/OBujFf1/PBYi5ipdbUUJWURLSf1uSNNEdzcylsboYQm+NrCjUfcrvdVFVVhVyh1mu1/o7KmduFrHhruOfg0aNzzhRulFIXKKVWTPDx2Az20WD92QI8AmyYYtt7lFLrlVLrM60hqX5ldTRMaW+nr6/P/8cLcqONRApaW71FWnT07HaUk0PayAjNDQ0+TBd4PQ0N2AFSUjQnCRMiLP/97zly552UjowwfNFFdNTVnfh5xow4yss5arORZha7njURSQAeAm5VSo1fv0UmeMoH3kUH/MJjEPD09VHQ10f3TLsFG5MaXruWTLeb9hBb89UUaj50+PBhRkZGAlKoFRQUEBUV5ZNCrd/6BR+blzen/SQWFgIwHOJX/4ORiMSLSOLo58BFeJuQBIesLEaio1kMVJu7apSVlZGakkLMwYOzHvYIQHY2dqUYDvGhjz3Wzxh7RobmJOGl8Etf4vD//A8rhobYu2EDHtN116fSGxupNxcXZk1EnHiLtPuVUg9PsEk9kD/m6zzgA1elAn7hMQjUbdmCA4iymmAYc5d60UUAHP7nPzUnmRmH7gCh4vHHH+eb3/zmlJ22BqzFnqcs1Hp64OKLobV1TnnsQDng+vnPqbnjjjntq8D65R4/xwYoKYsWAeAJ0UUFdRGRq4BfA5nAUyKyUyl1sYjkAr9XSl0GZAGPiAh4z9u/KqWe1hZ6PBFGCgpYXFnJoUOHWLlype5EWu3cuZPzly1D3nhjboWadZc7tquLwcFBYkJ0CEyfdZfdGSFvsgJpyTe/yVtbt3Lm44/z0LXX8tEQexMSrJTLRX5/P3UBuPAajsT7y+oPwAGl1C8m2exx4Isi8nfgFKBLKRXaV6V8pPnpp1kA5Fx+ue4oYaPkmmsYvuUW+l9+WXeUGTGF2jQ98sgjHD16lA+doPtOamoqJ5988uQblJXBm2/CBRfAHN+0SGYmzT4aZngwLY0zzj9/TvuIy8hgAKCtzSeZIoVS6hG8QxnHP94AXGZ9Xg0EdesxR2kpiysreco0N6C2tpZPnmR1mp7jHTWAbKC5uZkFCxbMPZwGA9bQzeg5zoM1JnbKP/9JZW4u5z70EDs3b2bNZZfpjhTymt98k2xAVqzQHSVUnQ58CtgjIjutx74NFAAope4GNuP9HVcF9AP/GviYwcm9bRsdQPGFF+qOEjaSMjPZExND4oEDuqPMiCnUpqmiooL169fz17/+da478v75u9+BNVRwthZYH8Gk02bD3tmpO4ahQdTSpSx88smIb9Hvcrk4duwYy4eGvA/MpbW3dUdtdC21UC3UhqzutLFWwyHDt8TpJPuZZ3CsX0/Pddcx0tqK0ywuPieNL7xANpB8+um6o4QkpdTrTDwHbew2CrglMIlCS2pNDYcSElhvzmOfOrJwIRft34/ryBEcE40iGxiA55/3jnxzOkGmfAkHhJmjNk0+6+ZYUeFtLJCff+JtQ1B3VBRRPT26Yxg6LF5MNNAVYlerfK2lpQWlFIUdHd4mK0lJs9/ZmDtqodz5ccRqABA/3zR085fEk06i4rOf5cyeHl78xCd0xwl5xzs+Xnyx5iRGpFHDwxR2d9Numtj4nPMLX8AJVH3ta+892N8PR45AUxNtS5bAFVdAdDQ9KSn0//3v2rKOMoXaNLS3t9Pa2uq7Qm3xYvDzOmu69MfEENvfrzuGoYPVncp98KDmIHqNrnmW1dg4t2GPAHFxeBITj99RC1Uua05uYpheoAoWq377W3alp7Pxn/+kYccO3XFCmrO8nMM2G5nmzbIRYI0vvEAMYJtqGo0xK+fffDNPxMWx8KGHGNy5E099PX2pqbBgAeTkEH3kCH92OnkaSOzuZuCGG1BW/wldTKE2DZWVlcAJmoRMV0UFhPHk5MGEBBJGh3wZkcVqJpPU2kpXV5fmMPo0NTWRDMQ3N8+9UMO76HWo31GjowMPkGQKNb8Su520Bx4gBqi66irdcUJaWlMTR03HR0ODxqeeAmDeJZdoThJ+7HY70XffTa9SNF58MQ2rVxM/PMxB4F3glxdeyMf7+iiuquKBG28kfXiYyp/9TGtmU6hNw2gL/DkXam43VFWFdaE2kpRE0siI7hiGDnl5uB0OFgP79+/XnUabxsZG70LX4LNCrcDpDOk7atLVRQ9gc5hp0f6Wf/75vHP22Zx15Ajv/PSnuuOEJDU8TEF/Pz0hOifUCG2D27YxABSbhdb94qJPfYonzz+fopYW8trbue/DH6bU4yG5vJzvPPMMTqeTRYsWcfkvfsEREQbvuUdrXlOoTUNFRQV2u52iuQ6BOHwYRkbCulDzpKaSqhQel0t3FCPQ7HbcBQUsBvbuDZ4l3gKtqamJ4+WZDwo1srPJFQnpO2r2nh56wnS4dzDa8Oij1DkcpH3nOwx2j19j2DiRhtdeIwpwzKURkGHMUkx1NbUxMcQmJOiOErY+vmUL/7jgAv62cSOf+Mc/EBFKSkqQMc1DEpKS2LliBcuPHmWwpkZbVlOoTUNFRQVFRUVEzbX7zmg3vDAu1MjIwA50WwvcGpHFuWQJpSLs27dPdxRtGhsb2RgV5e3Y6It29Dk5ZLrdIX1HzdnXR5/TqTtGxIhOSeHY7bezeGSErVdfrTtOyGl6/nkA0s88U3MSIxLltLfTbjWSMvzD4XRyzXPPcf2bb2KfYqRH+q23Ygcq/vM/AxdunBMWaiLyRxFpEZEJL5GL150iUiUiu0XkJN/H1MunHR8hrAs1x7x5AHRVV2tOYuggy5dTAuzfvVt3FG2amppYIwJr1vhmh9nZxLnddPlozUQdYgYG6A/RxbpD1Unf/S7v5Oay8bnnOPz667rjhJSu11/HAyzetEl3FCPCdNfVket2MxLG7xNDycYbbmC700nSo49qyzCdO2r3AlPNaLwUKLY+bgJ+O/dYwUMpRUVFBaWlpXPfWUUFpKTMeaHrYBZtrZPUU1urN4ihx/LlRClF/549upNo09jYSI7bDQsX+maH1pVV27FjeDwe3+wzwOKGhhiKjdUdI+IUPPwwAhy9+mq8S1YZ05Gwbx+HYmNJsC48Gkag1D/7LACx69drTmKAt/lI3ZlnUtjTQ4+mC9AnLNSUUq8C7VNsciVwn/J6C0gRkRxfBdStoaGB/v5+33Z8DIIF9PwlNi8PgIH6es1JDC1WrAAgq7WVtrY2zWH0aG9sJMnlOl5gzZm16HWGy0V7+1Q/ioNXvMvFSHy87hgRJ/uUU9h+2WWc1tzMW7ffrjtOSBgeHKSko4Nj1nIjhhFIHVu3ApB13nmakxijcqx1Kav/8Actx/fFHLX5wNgJSfXWY2GhvLwcMK35pyvB6pI1FMLzaYw5WLoUJcJyiMh5akop1OhrP8dH16vCYNHrJLcb91wW/jZmbeODD1IdHc38n/yEPms9O2NyBx95hBTAefbZuqMYEcizZw/9QJ6ZHxk0Vl13HUeAqH/+U8vxfVGoTXR7aMIxFiJyk4hsE5Ftx44d88Gh/c9nrfkHBrwrn4d5oZZsDfdyNzdrTmJoEReHu6CAFURm58fu7m5SRtcR9PEdtVBd9Hqkv58EgORk3VEikjM+nr6f/pQCt5u3TGORE2p6+GEACq+/XnMSIxLFHz5MbWwsjrk2rzN8JjYujndPOYWlDQ20Pv10wI/vi0KtHhi7imke0DDRhkqpe5RS65VS6zNDZJ5WRUUFcXFx5Fpzr2atqgqUCv9CbcEC3IAyV24jln31albabMfvRkeSxsZGjt9H81Whlp6OcjhC9o7aaAdYSU3VnCRyrfzyl3knN5eTXnmFziNHdMcJavFvvEGL3U7mqafqjmJEoJz2dtrM3Migs/buu2kFXB/9KMOHDgX02L4o1B4H/sXq/rgR6FJKhd5l30lUVFRQXFyMzTbHf6oI6PgI3gVtO0WwdXTojmJoIitWsNjjoT4CO382NTVxvDzz1dBHmw01b17I3lHrsQoDe4hcnAtXyT/9KanA9s9+VneUoKWGhljZ2MiBhQvDei65EZx6jx4lx3R8DEoL16zhha99jYT+fg5ecUVAjz2d9vx/A94ESkWkXkRuFJGbReRma5PNQDVQBfwO+ILf0mrg89b8xcVz31eQ63Y4cJhFViPX8uU4ARXBd9SUCPjwqqgtJ4f5dntI3lHrb/AOsIgyhZpWpZ/4BNszM1n5/PP0trTojhOUqv70J5KUwn3ppbqjGBHo8FNPARC3YYPmJMZErv35z3lp8WKW7t/PQADvqk2n6+P1SqkcpZRTKZWnlPqDUupupdTd1veVUuoWpdQipdRKpdQ2/8cOjJGREaqrq31XqOXmQgSsNN8bHU1Mb6/uGIYuVufH5Lq6iGoJfvDgQbZv3042oDIyYIpFNGcsJ4d8uz0k76gNWJmjfbH4tzEnMT/4AfOU4u2bbtIdJSi1/fnPDAIrb7tNdxQjAnW8+ioAuRdfrDmJMZl53/8+duDgrbcG7Ji+GPoYtmpqanC73abj4wwNxMURNzioO4ahS2kpHhGKBgdDtp38TL3yyissXbqU//t//y/5Dgfiq2GPo7KzyVIqJO+oDVmNhWJ9/W9izNjyz32OXSkpLH3iCQY6O3XHCS5KMb+sjB0pKWQWFupOY0QgtXs3XUDeaafpjmJMYsN11/FicjJrn3ySzgAteWIKtSn4rOOjd2cRU6gNJyaSODysO4ahS3Q0gxkZFOG92BEJ7rnnHlJSUnjsscc4Z8kS3xdqOTmkjozQ3DBhn6ag5rI6/CYWFGhOYgDId75DrsfDmzfffOKNI0jLa6+RPzRE91ln6Y5iRKjkI0c4nJCAzW7XHcWYhIiQ8Kc/0Q+k/PCHDFRV+f2YplCbgs8KtfZ2aG2NmELNlZJCitutO4ahkaeggCKgtrZWdxS/6+jo4KGHHuLjH/84V1xxBXGdnb7r+DgqOxsb4ArBoY8e665qYn7+CbY0AmHVV7/K/sREFv3znwz19emOEzRqf/1rABbccovmJEYkUh4P+d3ddOTl6Y5inMDGq67i2e98B4DKACyCbQq1KVRUVJCenk5aWtrcdlRZ6f0zQgo10tKIBwbN0JqI5SwtjZg7an//+98ZGhriM5/5DHg80Nzsu46Po6z9xff0MDAw4Nt9+1tHByNAvGk5HRxEGPra11jgdvPGl76kO03QiHvpJfY5nSy58ELdUYwIdGzXLlKVwrN8ue4oxjRc+I1vMAj0WPMK/ckUalOoqKigtLTUFzvy/umLfYUAm9XdrSMAt4SN4BRdWsp8oD7A640E0j/+8Q82bNjAd77zHVatWsVJJ53kvXs+MuKXO2pASK6lZuvupksEmesSJ4bPrPnOd6iMjSX/L39hxMwnZqSvj8VtbTQuXYqYtvyGBvVbtgCQfPrpmpMY0xGflMRRhwPn0aN+P5b5zTkFn7bmt9uhqGju+woBTutNZU8EDHszJmFNxu8/cEBvDj/6wx/+wKFDh9i4cSM/+clPvG/wRosoP91RC8W11By9vfT6sgOmMWdit9P5hS+weGSEd773Pd1xtDv06KPEALHnnKM7ihGhet98E4CCyy/XnMSYrtbERBLb2vx+HFOoTaK3t5ejR4/6rlBbuBCczrnvKwTEzJ8PQJ+10K0RgayLEipMF71WSlFWVsaVV17JU089xaWj6y6NFlHmjtpxzv5++qKidMcwxln7gx9wzGaDP/1JdxTtjj35JAD5V1+tOYkRqewHDtBos5ERKVNkwkBfZibz+vv9fhxTqE2i0ppX5pNCrbw8cuanAfFWd7fBANwSNoKUVajFNDWF5VpqjY2NtLS0sHbt2vd/w1931GJi8CQnh+QdtdiBAQajo3XHMMZxxMZycMMGNjQ3c3THDt1xtLK9+y4tIuSbYWc+IyJ/FJEWEdk7yffPEZEuEdlpfXw30BmDSUZDA/WpqbpjGDPgzs8n3eNh2M/LEJlCbRI+6/jo8XibiURQoZZoDXsbCbEr/4YP5eTgttvJc7lottbRCidlZWUA7xVqHg/885+webP3a1/fUQMkJ4dcQu+OWtzICEPx8bpjGBMo/N73cAL7v/Ut3VG0yqmroyYz08yj9K17gUtOsM1rSqk11sf3A5ApKLmHhlgwMECvWb8vpERZF6SP7dzp1+OYn0qTGC3UFi9ePLcdNTRAf39EFWqp1r+Zx1o/yYhAdjuDWVkU8t65FE5GC7VVq1Z5H3j4YbjmGvj732H+fEhM9PkxJSeHfKcz5O6oJbhcuEyhFpTyL7qIfUlJFLz0Ep4IXVKl+/BhFg4P07dihe4oYUUp9Srg31sNYeLIiy8SA9jXrNEdxZiBmIULAej081x8U6hNoqKigoKCAmJjY+e6I++fEVSoxaSk0AcQgEmWRvCyL1pEEbDTz1ebdCgrK2Px4sUkJSV5H/jjH70FWnU1HDzon4NmZ5MjElJ31JTHQ7LHg2f038kIOr0f/SilIyPs+P3vdUfRovqBBwBIvOACzUki0qkisktEtohIxPalb37+eQDSzz1XcxJjJpKsTu59fu5wbgq1Sfi04yNEVKEG0Gm34zDrqEW06NJSFoocv/sUTsrKyt4b9lhfD888A5/+tHduXkKCfw6ak0Om201jQ4N/9u8Hg52dRAOYuRdBa+UPf8gg0PHLX+qOokX3c8/hARZff73uKJFmB7BAKbUa+DXw6GQbishNIrJNRLYdC8OROkPbtuEGikabUhkhId26Cz98+LBfj2MKtQkopXxbqMXFQW7u3PcVQnqioojq7dUdw9BIFi4kUykObNumO4pPdXZ2UlNT816hdt993jlqn/60fw+cnU2M201vCA197LY6v9rS0jQn8RKRNBF5TkQqrT8nrCBFpFZE9lhNDsLrBTxOXG4uuxct4qTycrrD8E3wicTt2UO100mqmR8UUEqpbqVUr/X5ZsApIhmTbHuPUmq9Ump9prVOaziJqazksNNJXJD8nDSmJ2PRIgYA5eeLp6ZQm0BrayudnZ3vL9Tuvx/OOANmOo6/ogKKiyHCJin3x8QQG4C2pUYQs974DB08yPDwsN4sPjQ6lPMjlZUQGwvf+Q6cfTbMdT7riVidJG0tLbhDZD5Rb309AI6MCd9/6fDvwAtKqWLgBevryZxrNTlYH5ho+iR/5SukA29+7Wu6owSWUhQeO0ZDfr7uJBFHRLLFWl1cRDbgfT8akfMlsltbaZo3T3cMY4ZsdjstdjsOP1/giqzqYZom7Pj49NOwdSu8885MdxZxwx4BBhMSSBga0h3D0Km4GIBCl4t9+/ZpDuM7ZWVlOIDixx+HpUvhm9+EX/3K/we2OknO83hoC5H5n/3WEh1RWVmakxx3JfBn6/M/Ax/WFyV4lN5yC4djYsh+8EE8Ho/uOAHT9NZbZHg8uNet0x0l7IjI34A3gVIRqReRG0XkZhG52drkamCviOwC7gSuU+G4lssJ9B87Rv7ICIP+vtBn+EVnTAyxfp7mYwq1CUxYqI3ONbMWxpyWkRFvc4EILNRGkpNJdrl0xwgJIvIzETkoIrtF5BERSZlku0tEpFxEqkRkqjsBwcF63ZdCWM1TKysr41Opqdja2uD734ef/ARWr/b/gccseh0qnR8HrcYnMX5YrmCWspRSjQDWn5NdxlbAsyKyXURuClg6XWw2jl1/PauHhngzguaqHfnnPwFIv/xyzUnCj1LqeqVUjlLKqZTKU0r9QSl1t1Lqbuv7v1FKLVdKrVZKbVRKvaE7sw61mzdjA2JOPll3FGMWepOSSOrr8+sxTKE2gYqKCpxOJwsWLPA+oNTsCrWaGu9QyQgs1FRqKilK4Q6jIW9+9BywQim1CqgAPrCokYjYgbuAS4FlwPUisiygKWcqKQmVk8MKhyPsCrWbnE5v4XTJiZYJ8iFr6GMOobOW2nBLC+CdBxUoIvK8iOyd4OPKGezmdKXUSXjPt1tE5KxJjhU2TQ5W//zndIsw/LOf6Y4SMMOvvsoAUPKRj+iOYkSojpdeAiD7oos0JzFmYyg9nXQ/v881hdoEKioqWLx4MQ6Hw/tAayt0dnrn3OzeDdPt8DJa3FktPCOJZGRgA7r83A0nHCilnlVKjd5+fAvIm2CzDUCVUqpaKTUM/B3vMK6gJqWlrImNDZtCbWBggPb9+zn52DG44QYY/RkRCGlpKKczpO6ouaziJbGgIGDHVEpdoJRaMcHHY0CziOQAWH+2TLKPBuvPFuARvOffRNuFTZMDZ1oaB049lTOam6mw3jyGu9SKCsoTEojxw7qHhjEd8vbbtAELTGv+kKSyskhWimE/Dn80hdoEysvLJx72eOut3j+femp6Oxp9njVXJ5I4rDkpXdXVmpOEnM8AWyZ4fD5QN+breuuxCQXNlf7SUoqGh9mzezfhMP1g7969nOfxYFcKrrsusAcXQeXns4jQuaOmOjoASAqeZg2PAzdYn98APDZ+AxGJF5HE0c+Bi4C9AUuo0eI77sAOVEVAU5H+ujqWdHfTsjxil+8ygkBWTQ2VGRnYA3nRz/AZu/W7rXXPHr8dwxRq47jdbqqqqiYu1DZt8nZ2m+7wx4oKyMiACGy5GmUN0+o1d9SA6Q3HEpH/AFzA/RPtYoLHJq18guZK/5IlxA8NEdXTQ3Nzs74cPlJWVsZawBMdDdYaKoFkW7uWdSIhc0eNzk76gejgWfD6J8CFIlIJXGh9jYjkishma5ss4HWrycE7wFNKqae1pA2w9JNPZldBASeXldFuNYIJVwetojTp4x/XHcWIUN1HjrBoaIg+Db9LDN+ILSoCoPPAAb8dwxRq49TV1TE0NPTBQs3p9A593LQJXnwRpjN5sLw8IuenAcRZVxkGrPbcke4Ew7EQkRuATcAnJul8VQ+MvS2RBwT/ysfWsN9SvHeqQ11ZWRnr7XZk9erADnsctXYtC5Wiy1qfLNjZenroCqKlSZRSbUqp85VSxdaf7dbjDUqpy6zPq60GB6utZgc/0ps6sJL/67/IBN763Od0R/Er91NPcQw46abw7xVjBKeq+73XZJMDOdfZ8KlE6z1+b2Wl344RPL9Bg8SEHR/Ly7130ux2b6E2NAQvvDCdnUVsoZZgNWIZDpUr/xqJyCXAvwFXKKUmW3zuXaBYRIpEJAq4Du8wruAWboXajh2sFUFGF7sONOu4iSEypNjZ20uf06k7hjEDCz/9acpTU1m2ZQs97e264/jN/Joa9mdmEhUTozuKEaG6n30WD1Bs7uqGrDRr6PRwXd0Jtpw9U6iNM2lr/tGvzzwTEhPhiSem3lFvLzQ0RGyhlrJoEQCulgnn6hvv9xsgEXhORHaKyN3w/uFYVrORLwLPAAeAB5VSwb842YIFqOhoVjgcHDx4UHeaOXG73XTu2kWiy3W8YAo467jzQuQCSHR/P/1RUbpjGDMhgnznOxR6PLx244260/hFb3k5ucPD9K9ZozuKEcES9u6lKiaG5OCZw2vMUHpJCS7A0+C/AU6mUBunoqKCxMREskYXaHW7oarqvYIrKgouvtjbUGSqhUFHb4NGaKGWlJ+PC7wdM40pKaUWK6XylVJrrI+brcePD8eyvt6slCpRSi0KmeFYdjuyeDFrY2ND/o5aRUUFS0cXcddVqOXk0B0XR5HVpCPYxQwNMRgbqzuGMUMlt93GwZQUVj/2GJ0h0rhmJg795S8ApG7apDmJEak8LhfFra00WXOcjNDkjI7mmM2G3Y9N20yhNk5FRQUlJSWIWL0b6uq8Qx3HFlwf+hA0NsJULcdHG5BEaKEmNhsdIthC5A2l4UelpZQQ+kMfRxuJKJsNVq7UlqM1L48VLhe9vb3aMkxX/PAwI3FxumMYMyWC46c/Zb5SvPGpT+lO43N9L73EILDMDDkzNKl+4gmSAdsZZ+iOYsxRR1QU0X58r2sKtXFGC7UxD3j/HPvYpZeCyNTdH0eft3ix70OGiG6nE2d3t+4Yhm6lpWT19VFXXc3Q6B2pEFRWVsY6m807707jXaLekhKWA00h0FE10e3GZdaoCkmL/8//YXdWFhuef55jhw7pjuNTcZWVVEVHk5SRoTuKEaGaHnoIgLxrr9WcxJirnoQE4v144dQUamMMDQ1RW1t74kItMxM2bjxxoVZQoPUNnW590dHETKc7phHelizB7vFQqBSHQvgN3/GOjyedpDWHWr0aJ5D58Y/DV7+qNctUlMdDslKo5GTdUYxZSr7rLtKAnRdfHBbrIAKgFPmtrbRYS8gYhg62N9+kRcQsdB0GBpOTSRkc9Nv+TaE2xqFDh1BKfbBQS0yE0TlrozZtgm3bvEMgJxLBHR9HDcTHE+fHF68RIsZ0fgzVhiJKKY5s307WyIi++WmWxCuv5BlAGhvhl7+EtjateSbTWVODHRBz1yJkLfjoR3n7zDO58NAhXvrKV3TH8YmeykrSPR5cZqFrQ6O8ujoOZWcjQbR8iTE7rowMMtxulNvtl/2bV8gYU3Z8lHHrDY9OQn7qqQ/uSClTqAHDiYkkDQ/rjmHoZhVqSwjdeWp1dXUUdnZ6v9BcqBWuW8c1iYnce+qp3gemmiurUds+b1NSZ0GB5iTGXGx45hnKExJY8+tfU79jh+44c3bkce+qJolnnqk5iRGpWvfupWBkhAHNv0sM35CcHJxAj5+mI5hCbYwTtuYfa+VKyM+fePhjayt0dh5/gxqp3MnJpEzVGdOIDCkpMG9eSHd+HG0kAoDmlt42m43Vq1ezZfRufpAWat3W/3XcwoWakxhzYY+NJf7hh0kCKsKgsUj3q68CsOCKKzQnMSJVjdV1NN28BsOC01peYfTipK+ZQm2M8vJysrOzSUpK8j4wNAS1tRMXaiLe7o/PPQfjh/dFeMfH49LTiQX6TYt+o7SUFU5nSBdqJwGeggJIS9Mdh7Vr1/La/v2o/PygLdQGamoASF6yRHMSY67yLryQN5cu5Yz9+2nZtUt3nDmx79vHYZuNHPO6NDQZfv55+oHS66/XHcXwgdGLkV0HDvhl/6ZQG+MDHR8PHfIOY5zsztimTdDfDy+/PH5H3j8jvFCzzZsHQGcIN5AwfKS0lMLhYcrLy0OyKcHevXvZ4HRi09xIZNTatWvp6+ujt7g4aAu1kSNHAEg3c4HCQv6vfoUD2PelL+mOMifzGhqoS09/bwkewwiwrP372ZucTMzoTQEjpKVav+P6/fRe1xRqY0yrNf9Y554LcXEfHP5YXg5OJyxY4J+gISIqOxuAntpavUEM/ZYsIXFwEDo6OObHhSH9pbOujqIgaCQyaq2V43BqqvfnTTB2V21qog9IzM3VncTwgcILL2RHVhbLX3+dgdH5miHG1dVFweAgfYsW6Y5iRKj2vXtZPDBAz/r1uqMYPjLPmg4xYuao+VdnZyctLS3vL9RGh2kVF0/8pJgYuOACeOIJ7523URUV3vXT7Hb/BQ4BMfPnA9BnXVk3ItiYzo+hOPwxra7O+0mQFGrLli3D6XSy3ePx/uzZvVt3pA9wtrbS6nCYrmZhxPn1rzNPKd79+td1R5mVui1bsAHRp5yiO4oRofZ861sAZN9yi+Ykhq8kZGbSAdDQ4Jf9m9+glsrKSmCCRiLZ2TDV7elNm+DIEdi79/3Pi/BhjwDxVre3QT+9eI0QEsKdH5VS5I3OswySQi0qKooVK1bw7OjdySAc/hjb1UVXBK8jGY5WffWrHIqOJuOvf0WFYKOoY88/D0D2xRdrTmJEosGODhZv3sye5GSWX3WV7jiGD7VGRxPtp34MplCzzKjj41iXX+79c3T4o9sNVVWmUAOSiooAGJlsrTkjchQVoZxOltntIVeodXd3s3xkhP74eLDuEgeDtWvX8sAbb9Auwu4//1l3nA9I7u+nz8zBCCtis9F49dUsGxhg51136Y4zYyO7d9MHLDr/fN1RjAi0/TOfYb7Hw8h3v6s7iuFj3fHxxHd3+2XfplCzVFRUYLPZWDi2lfR0CrXcXFi37r1Cra7O2y3SFGqkLl4MgArBOUmGjzkcyKJFnBQXF3KFWlNTE8VAb17eB9dT1OjWW2/l/9x0E/ujo3GMvaMfJNJGRhgOgg6Zhm+d9Mtf0iqC7fvff/+Q/xAQXVdHXXQ0zqgo3VGMCFO/ZQtrHn2Ut9LSWHvbbbrjGD42kJpK2vgO8D5iCjVLRUUFhYWFREdHex/o7ISWlukVXJs2wZtvetdPMx0fj4tKSKAHkPZ23VGMYFBaSglw8OBB3UlmpLGxkSLAHWQLN69cuZLf/va3uFasYFF/PyP9/bojHTfY2UmqUqisLN1RDB+Ly8xk28UXs7q1lb2/+IXuODOS3t5Ou7l4YATY4SefJHrTJrpFyH7ySdNxNAy5s7KY53bjGh72+b5NoWb5QMdHa87atAs1pWDLFlOojdNlt2Pv6tIdwwgGS5aQ09fH4UOHGPbDDzN/aamvZz7gsO4QBxvnhg1EAzWbN+uOctwx6w6fPS9PcxLDH868/35q7Xaib78dz8iI7jjT4hocJG94mKEgu+BihLehtjair7qKEaDzoYcoPPVU3ZEMP7Dl5+MEWvbv9/2+fb7HEKSUmnlr/rFOOsnbdOSJJ7zPS0wEcyUZgJ6oKKJ7e3XHMIJBaSkOj4cCj4fq6mrdaaatd/9+bEBckK4Hln3ppQC0PPOM5iTv6bLumsYUFuoNYvhFfFoaR77wBYoHBnjrppt0x5mW+q1bcQLOZct0R4kIIvJHEWkRkQnHZYvXnSJSJSK7RSQ4Fqn0sbKPf5xsl4uan/yEpaaBSNiKsXoytO/b5/N9m0IN7xyU3t7eDxZqNhuMnbM2GZvN21TkmWe83R9LSoJqLotOfXFxxAbRkCxDozEt+vf54YeZv7itRSzjgvQNXuFFF9EHuLdt0x3luN6qKgASgvQupDF3Z/zyl+xMTKT4vvvoC4F5yMe2bgUg2axfFSj3ApdM8f1LgWLr4ybgtwHIFFCde/aw6tlneSkri9O/8Q3dcQw/irN+1/WN3uTxIVOo8V7Hx1LrjaT1IBQWwuictRPZtAm6u+Hll4+/ITVgKCGBxKEh3TGMYGCdF0tFKAvCdvKTsVvrAMp0LtpoYI+KojohgeSaGt1Rjhu2Fv5MC9K7kMbc2ex27D/5CZkeD6/ecIPuOCfUv2sXADlnnaU5SWRQSr0KTDVB/UrgPuX1FpAiIjmBSRcYldddhw3I+uMfdUcx/CzF+l035Iffw6ZQYw6t+ce64AJvUaeUmZ82hispiWS3W3cMIxikp0N6OhtSUkKqUIttasIFQdWaf7yOBQso6uoKmrWt3EeP4gHSlyzRHcXwo5Vf+AL709NZ8fTTdPtpDSGfqaqiB0gP0jvjEWg+UDfm63rrsbBw5LHHWLd/Py+tXMmyyy7THcfws4wVKwBQ9fU+37cp1PAuwBsTE0Pe6MR3pbyF2kzujCUkwLnnej83hdpxKi2NFKVw+altqRFilixhpdMZUoVackcHrXFx4HDojjK5k04iGTj4t7/RVl5OW3k5HpcroBEGBgZobW2ltbUVGhtptdlwxMQENIMReI7bbydfKbZ+4Qu6o0wpoaGButhYxGbe9gSJieaHTLjeg4jcJCLbRGTbsRAYZjs8OEj7Jz9JuwhrH3xQdxwjAKITEmgRwd7c7PN9R/xPLKUUb775JsXFxdhGf4A3NUFv78wLrg99yPunuYp8nGRkANAZRMOyDI1KS8nv76exsZFmP/xA84fMvj46U1N1x5hS5sUXA7D0k58kfckS0pcs4Y0AXjDq6uoiOzubzMxMMjMz6a+qomO6w8aNkFby5S9TmZhI8cMPM9jXpzvOpDK7uuhIT9cdw3hPPZA/5us8oGGiDZVS9yil1iul1mdmZgYk3FxsPfNM1vT2UnvzzWSb94MRoy0qihg/LEcV8YXaQw89xBtvvMFNYztXjS7IO9M3Op/9LDz2GKxZ47N8oc5hdb/sNoWaAVBaSnxvL8kQEnfVhoeHyXe5GJg3T3eUKS25/nq2fuELvHL11bxy9dXsTkxkkTVPLBC2b99Od3c3t912G7/+9a85KzWVzLPPDtjxDY1EGLztNha73bx2662600zIPTDA/JERBvPzT7yxESiPA/9idX/cCHQppRp1h5qr7Z/7HOdu28arK1aw/q67dMcxAqgrPp6Enh6f7zeiC7W+vj6++tWvsnr1am6++eb3vjHbtdCiouCKK0zHxzGic3MB6A3gm0YjiFnDiZcQGoVay+HDZAOuIH+DJzYbp991F2f/4x+c/Y9/0H7uueR4PBwLUHfN0f/Lb3/723zx+utJ7Ogg7fzzA3JsQ78Vt99ObUwM8++7D3eAh9xOR+Mbb2AH7ObuRsCIyN+AN4FSEakXkRtF5GYRGX2ztRmoBqqA3wHBPXZ2Gip+/3tW3XMPb6aksOHNN817wQjTn5pKmh+m+UyrUBORS0Sk3Frv4t8n+P45ItIlIjutj+/6PKkf/PjHP6auro677roLx9j5JxUVEBMDZrHWOYuz3uAO+GGCpRGCrAm356Wnh0Sh1mFltIdYm/lk627W4UcfDcjxysrKyMvLIyMjA0b/X9euDcixDf3E4aD1xhtZNjzMG7ffrjvOBzS+8goAaRs3ak4SOZRS1yulcpRSTqVUnlLqD0qpu5VSd1vfV0qpW5RSi5RSK5VSwbO+yCz01deT9PnPc8ThYPG2bcQkJOiOZASYKzOTDLcbNTLi0/2esFATETtwF941L5YB14vIRG2TXlNKrbE+vu/TlH5QWVnJz372Mz71qU9x+umnv/+bFRVQXOxdH82Yk0RrwdvhxpAf0WD4QlERJCVxVlJSSBRq/dYdqdilSzUnmZkia2HV3tdeC8jxysrKWDtamJlCLSKt/fnPaXA4SPjNb1Bqwp4Q2vRaawwusOZyGoZPKUXVueeS7nLR8etfk7loke5Ehg65udiAvupqn+52OpXIBqBKKVWtlBoG/o53/YuQpZTiK1/5CtHR0fzP//zPBzeYaWt+Y1LJ1tpT7pYWzUmMoGCzwZo1rBge5tChQwwMDOhONKVBq+jIPO00zUlmJqWoiDqHg6j9+/1+rP7+fg4ePPj+Qq2gANLS/H5sI3jYY2I4fPXVrO3tZduvfqU7zvs4ystpttlIXrBAdxQjDO245RZWV1Xx5Kmnsn7sNBojojisny/te/b4dL/TKdSmu9bFqSKyS0S2iEhQr3L65JNPsmXLFr73ve+RkzNufUWXCw4dMoWajyTm5jIC0NamO4oRLNauJfvYMUQpqqqqdKeZkmPPHhptNjJCcO2lo5mZ5DQ1+f04e/bswePxvL9QMw2VItJJ//u/tNlsuP77v3VHeZ+UpiYagrxzqxGa2vfto/i3v+WdpCQuff553XEMjeKsO6m9o30ufGQ6hdp01rrYASxQSq0Gfg08OuGOgmAtjIGBAb7yla+wbNkyvvjFL35wg9pab7FmCjWfEJuNDpsNW2en7ihGsFi7FsfwMCV41zAMZlmNjdRZS0yEmsElSygaGaGnYcKO1z4zOoR1zZo10Nfn7Zprhj1GpOjUVPZv3MjJx47RuHOn7jgAuF0uFvT301dQoDuKEYYqPvxhooCUv/2NmLg43XEMjZKtZkUDPu5yPp1C7YRrXSilupVSvdbnmwGniHzg3U0wrIXxs5/9jJqaGn7zm9/gdDo/uMFsOz4ak+p2Oonq7tYdwwgW1pv4tcDBgwf1ZplCf2srRUND9Ifoz4I4a+5tjZ8bipSVlZGamsqC3l74y19AKVOoRbCC73wHB3Dgu8HRU+zw1q0kAY6VK3VHMcLM/v/9XzZWVfHKKadQctlluuMYmmUsXYoHcPm4ed50CrV3gWIRKRKRKOA6vOtfHCci2SLePqQissHab9CNdautreXHP/4x1157Leeee+7EG5lCzef6oqOJCeKFUI0AW7oUoqM5KyEhqO+oVT/2GHYg5tRTdUeZlfwrrgCg48UX/XqcsrIyzl26FFmzBm6+2TsPcf16vx7TCF4LLr2U/fHxZD/3XFA0FWl89lkAUs46S3MSI5y4BweJ/trXOGy3s/Gxx3THMYJAenY2rYA0N/t0vycs1JRSLuCLwDPAAeBBpdS+cethXA3sFZFdwJ3AdSoYfkKPc9ttt2Gz2fj5z38++UYVFZCaCunpgQsW5gbi44n3w9oS4UJEfiYiB0Vkt4g8IiIpk2xXKyJ7rCUwQreVsdMJK1awwekM6kKt/YUXAJi/aZPmJLOTvW4drSLYdu/22zFcLhd79uzh0nnzwO2G//1f2L0b5k80jdmIFG2XXcaywUHK//lP3VEYfOcdAAouvVRzEiOcvP3xj7NocJDDX/0qSVlZuuMYQcBms9HqcOD0cU+GafWfV0ptVkqVWOtd/Mh6bOx6GL9RSi1XSq1WSm1USr3h05Q+8PTTT/Poo49y++23kzfV+mijHR/NQoU+M5KYSKKP15UIM88BK5RSq4AK4FtTbHuutQRGaN+yWLuWkoEByg8eDIqr7hMqK6NThLwzztCdZFbEZuNwaiqZflzD8ODBgwwODrLebvc+8IlPwPKg7iVlBMDyH/yAEaDxpz/VHYWoigqOOhzE5ebqjmKEibZdu1j1yCO8kZ7OmRN1DjciVndsLLE+nuoTEQuFDQ0N8eUvf5mSkhJuu+22qTcuL4fS0sAEixDulBRSPR6Ux6M7SlBSSj1r3bkGeAvvPNDwtmwZCYODRPX00OzjYQK+kl5XR01yMhLC6yn2LF7MwoEBhnt7/bL/0UYiC7u6YPFiSEryy3GM0JJWWkpZdjZLd+zANTSkNcu85mYazQgZw4cOXXUVdiDzr39FzEV9Y4zepCSS+vt9us/QfQcyA7/85S+prKzkzjvvJDo6evIN+/qgvt7MT/O19HSigT6zltp0fAbYMsn3FPCsiGwXkZsCmMn3rO5IpQRn50fX4CAL+/rostYBDFVRGzcSBVQ/8YRf9l9WVkZMTAyJhw6ZBiLG+8inP022x8Nb3/++tgxDvb0UDg3RH+LnsRE89t15JxtqanjtjDMovugi3XGMIDOSlkb68LC3qZaPhH2hVl9fzw9+8AM+/OEPc/HFF0+98eiaTqZQ8yn7vHkAdB46pDmJPiLyvIjsneDjyjHb/AfgAu6fZDenK6VOAi4FbhGRSWfHB8NSGFOy7lqXEpydH2u2bCEWcJx8su4oc5JjdSI7ZjVU8LWysjJOW7YMqakxhZrxPid997u02Wx4/t//05ah9vnniQaizGvT8AGPy4Xz3/+dI3Y7pz3yiO44RhDyZGURDbh9OE8t7Au1b3zjG3g8Hn75y1+eeGPT8dEvoqxFxXtqa/UG0UgpdYFSasUEH48BiMgNwCbgE5M14lFKNVh/tgCPABumOJ72pTCmtGABKjqa5Q5HUN5Ra37mGQCyTnRxJ8gtOP98egDP9u0+37dSip07d3L5aOMQ82bYGMMeG0vlmWdyWlsbVa+9piVDy0svAZBxzjlajm+El7e/9CVKBgaovekmEkJ0fU3DvxzW78NOH16ADutCrba2lgceeIDbbruNwsLCEz9htFBbvNivuSJNjPXC7a+r05wkOInIJcC/AVcopSYc3Cwi8SKSOPo5cBGwN3ApfcxuRxYvZn1CAu+++67uNB/gevddBoCiEO8UZ3M4qElMJNUPF0lqa2vp7Oxk4+hwclOoGeMs+u//xgFU/Md/aDn+8I4duIECM0TNmKOB9nYKfvc79sXFccadd+qOYwSpGKvWMIXaNP3xj38E4Oabbz7BlpaKCsjLg/h4P6aKPPEFBQAMHT2qOUnQ+g2QCDxntd6/G0BEckVks7VNFvC6tQTGO8BTSqmn9cT1kdJSlorw9ttv0+/jybdzlVxdTXV8PI6YGN1R5qyjsJCinh48LteJN56B0UYiJX19kJMDpkW1MU7maaexJyOD5Vu3MqxhiZaYQ4eoi4oiKjk54Mc2wsubH/84891uRn70I2wOh+44RpBKKC4GoM+HU33CtlBzuVz84Q9/4JJLLqHAKhROaLQ1v+FTydZE7pGmJs1JgpNSarFSKt9qu79GKXWz9XiDUuoy6/Nqa/mL1dZSGD/Sm9oHliwhvbsbNTLC1q1bdac5Tnk8FHV10ZafrzuKT9jWrSMROGytC+crZWVl2Gw20o4cMXfTjEm5b7yRBR4Pb/4o8D+yslpbaQnGod9GSGnZvp31zzzDu9nZrLn1Vt1xjCCWunQpAEOHD/tsn2FbqG3ZsoWGhgZuumkGzfFMoeYXKVahplpbNScxgkppKTa3mxK7nRdffFF3muPqX3+dFKXCpvjItIZ9NW7efIItZ6asrIw1paXYDh4Mm38rw/dWfve7tNtsyO9+F9Dj9rW3UzgywpCZymDMhVI0jbbjv3+yPl+G4TWvuJhBwNPQ4LN9hm2hds8995Cdnc3ll18+vSe0tUF7uynU/MAZF0cXIO3tuqMYwcTq/LipuJiXrEn/weDok08CkHb++ZqT+MbCD32IYWD4nXd8ut+ysjIuX7AA3G5TqBmTssfFUX7KKZza3EzDnj0BO271U0/hAKJDvHOroVfNj3/Mqro6nj/7bArPO093HCPIJSQm0iyCzYfLUYVloVZfX8/mzZv5zGc+g9PpnN6TTMdHv+pyOHB0demOYQQTq1A7NzeXbdu20d3drTmQ1+Cbb+ICFl11le4oPhGVkEB1bCwJlZU+22dLSwsNDQ2cmZDgfcAUasYUcr/+dZzAvh//OGDHbLXu0ueaRiLGLA3V15P83e+yw+nk7Ice0h3HCBEdUVFEd3T4bH9hWaj98Y9/xOPx8NnPfnb6TzKFml/1REcT3durO4YRTFJSICuL1U4nbreb1zS18B4v4cABaqKjiU1L0x3FZ47l5bGgvR3l8fhkfzt37gRg2fAwJCdDUZFP9muEpwVXXcVRp5P4pwPX/8i9cyeDwHzTmt+YpQMXX0yC203fr35FSnq67jhGiOiOjye+p8dn+wu7Qs3tdvP73/+eCy+8kKKZvHmoqACHA6bTxt+Ysf7YWOIGBnTHMILNhg1kVVYSFRUVFMMfm3fuZE1bG0dXr9Ydxac8q1aRqRTNVoE1V6MdH7MaGmDNGhDxyX6NMCVC3fr1rOvooDFA6yYm1dZyOD4eme6oGsMYo/zOO1mzfz9Pr13LmZ//vO44RggZSE4mxYddbsOuUHv22Wepq6ubWRMRgPJyWLQIzA91vxhOSCBheFh3DCPYnHcetupqrli7NigKtQPf/jYOoOC//kt3FJ9Kse4q1D3+uE/2V1ZWRlFBAY79+72FmmGcQPYttxAN7A7A8EeP201RVxet0+34bBhjuHp6iPvGN6hyODjnmWd0xzFCjCsjg3S3G0ZGfLK/sCvU7rnnHjIzM7niiitm9kTT8dGvXMnJJPt4HScjDJx7LgCfyM2lrKyMDh+O654p5fFQ8MIL7E5MZGGIL3Q9XtGHPwxA3+uv+2R/ZWVlXF5cDP39Zn6aMS2F11/PMYeDaKtZjz/Vvf02mUoh5iKCMQvbP/IR8oeHafjOd0gyyzsYM2TLzQVgwEct+sOqUGtsbOSJJ57gX//1X4mKipr+Ez0eqKw0hZofqbQ0koGRIFvY2NBs5UpIT+fUgQGUUrzyyivaouz9/e9ZODxM10c/qi2DvyTl5VHrdLLg1Vd5denS9328fvPNM9pXb28vlZWVnJuS4n3AFGrGdNhsHF67lpPb2mioqvLroerDrHOrETiNL77I2uef54X58znzu9/VHccIQTHWFKpjPupyG1aF2p/+9CfcbvfMmogA1NfD4KAp1PxIMjIA6Kyu1pzECCo2G5xzDvP27SM2Jkbr8MeOX/yCXmCNhoV5A6H29NOJdbspqag4/vH/t3fn8VFV9//HX59MEhJCQkjYIksEGgmbEgibRQFrteD2reIXLKAFFYqi8lUrfpVvpXVpq79axQ0TCQUiRaiKFRekUJcKAYUAYZV9hwSSQAiQbc7vjxkwQAKTZGbuncnn+XjMw8zMnXPfM86HmTP3nnN6bN5Ml7S0Gk0ysnbtWowxXOl0Qng4uBf4VOpSWjz4IFHAqhde8Ol+Ti1bhhO4vKZn1iivEpFfiMgWEdkmIk9Wcf9AETkmImvcF8t7RkdGjuQEkPTRR4iOvVW1EOPuSxRu3uyV9oKmo+Z0OnnnnXcYNGgQSUlJNXuwzvjoc2EtWwJwTDtq6nyDBiF793JHjx6WddSKc3NJ2bKF7KQkot2nLQSbgf/+Ny0rKs65rB4+nCbGsH/5co/bOTORSOu8PNcRUR3XqzzUZsQICkJDifzoI5/uJ3LLFvaEhxOhp61ZRkQcwBvAYKAzcJeIdK5i02+MMd3dlz/4NeR5drz1Ft0OHuTb666jbc+eVkZRAaxJZ9fbvHj7dq+0FzQdtSVLlrBz507uv//+mj9YO2o+18D95bd4zx6LkyjbcS8i+quWLcnJyWHnzp1+j5D99NNEA40nTvT7vq105tSw/TUYN5SdnU3T+HgabNwYcKc9isidIrJBRJwiknqR7S56JEDVUmgoO3r1on9+PrvWrvXZblrl5XHY/eOgskxvYJsxZocxphSYC9xmcabqOZ0waRI7Q0LoP2eO1WlUAGtx5ZUAlHnp+27QdNTS09OJj4/nl7VZpPaHHyAqChISvB9MAdCwTRsATu/fb3ESZTvJydCyJdc6nYgIf/vb3/weodH8+ewMC6NbDcdrBbr2//VfVOA6VcxT2dnZ3NCpE5KfH3AdNWA9cDvwdXUb1OBIgKqFhCeeIALY9OyzPmn/yI4dXF5RQWmXLj5pX3msFbC30vV97tvO109E1orIZyJi2f+0jc88Q/uiIjYMG0aTFi2siqGCQFRcHAUimEOHvNJeUHTUcnNzWbBgAXfffTcRERE1e3BFBXz5pevLop6P7DPR7sGVpQcPWhtE2Y8IDBxI1IoV3PDzn58da+ovh7/9lu7HjrF74EAkJCj+SfRYw6ZN2RUeTqSHa1uVlpayfv16bjhzSlmAddSMMZuMMZd6soF1JCDAXHbbbeyKiKC5j6Y93+k+rTLmmmt80r7yWFVfqMx511cDicaYq4DXgAVVNiQyVkS+F5Hv8/LyvJsSMKWlRL/0EhvDwvhZerrX21f1T354OOFHjnilraD4VjJz5kzKyspqd9pjRgasXQuPPur9YOqs2A4dAKjIzbU4ibKlQYPg4EEeGTyYvXv3snTpUr/t+virr1IBRD3wgN/2aSeHEhJo4+EHysaNGykrK6NnSIirg+0+xSPIeHokwOdfIIOSCHsGDKDniRPs89JyEZUVumeObXvzzV5vW9XIPqBNpeutgQOVNzDGHDfGnHD//SkQJiJNz2/IGJNmjEk1xqQ288G4w9UPPUSbkhL2jx9PZFSU19tX9U9Ro0Y0PH7cK20FfEfNGEN6ejr9+/enU01nH8vPh//9X7j2WrjrLt8EVABENW9OCcDRo1ZHUXbkHqd2vcNBXFwc06dP989+Kypo8fnnfA50uv56/+zTZsq6duWyigqOenBUbfXq1QAkFhRAx46uU8ZtRkT+JSLrq7h4elTMkyMBrht9/AUyWCU+9RQAW595xuttO3JyKAgJoUnXrl5vW9XId0CSiLQTkXBgOPDPyhuISEtxT60oIr1xfSf165eEsqIiWk+fTnZkJNf95S/+3LUKYqdjY2ly6pRX2gr4jtpXX33F1q1bGTt2bM0fPHkyFBbCa6/paY8+JiEhFISE4CgstDqKsqMOHaB1a8K++YYRI0awYMEC8vPzfb/fL74gpqiIzxMSaNSoke/3Z0MxAwYAsOvDDy+5bXZ2NlFRUTTautW2pz0aY643xnSt4uLpVIOXPBKg6ibx2mvJiYuj3ZdfctLLnwlN9+9nX1ycfqZbzBhTDkwAFgGbgHnGmA0i8hsROTMYeCiwXkTWAlOB4caYKn8U8ZVVEyfSoqKCk08+iSM01J+7VkGsokULmjudlJaU1LmtgO+opaWlERsby9ChQ2v2wNWrYdo0ePDBYD19x3aKwsIIKyqyOoayIxHX6Y9ffsmYe+6hpKSEv//9797fT2EhDB4M/fq5Lvfdx9GQEPJ/+lPv7ytAtLv9dgD+9dJL3HDDDRypdBpkfn4+N954I/369aNfv35kZmZyTefOyN69tu2oecEljwSoupNJk7jc6WTZPfd4rc3j+fkklZRQrDM424Ix5lNjzBXGmA7GmOfdt00zxkxz//26MaaLMeYqY0xfY4znsxp5I19FBS3efZcNERH0e/ppf+5aBTlH69ZEAIc9HP99MQHdUTt69Cjvv/8+o0aNIjIy0vMHOp0wYQI0awa//73vAqpzFEdEEFlcbHUMZVc33wx5eXTPzyclJYWMjAzv72P2bPj8c2jYEGJiKOvYkcecTq5MrXam9qDXpEMHCqKj6elwsHjxYpYsWXL2viVLlvDFF18QGhpKTEwMvXv35skbb3TdGYAdNRH5pYjsA/oBn4jIIvftl4nIp1D9kQCrMgerrr/9LWvj40n5+GMOb9rklTZ/+OQTIoHIvn290p4Kbmuee452JSXk3XMPIQ6H1XFUEIls3x6APC8sQxLQHbVZs2ZRWlpa80lEZs+G5cvhz3+G2FifZFMXOh0VRZQXDgOrIHXrrdCkCWRkMGbMGFavXn12cWWvmTEDevSAJUtg0SK+mTyZmUBKAHY6vKnJddfxsyZNCAsLO+c1z87OxuHuwC1atIhFixYxICbGdWcAvmbGmA+NMa2NMQ2MMS2MMTe6bz9gjBlSabsLjgQoLxMhdsYMYo1hvfuobl3lLV4MQGudSER5IPSVV9jrcNBPx6YpL2vkPqpfdGad5joI2I6aMYa0tDT69u1Lt27dPH9gYSE88QT07Qt33+2zfOpCpTExxJSVWR1D2VVEBIwYAR9+yIghQ4iNjeW+++7j9OnT3mk/O9t1GTOm0k2uTkl976iRkoJs3UpqcvIFHbXOnTufu+xJdja0aQPx8RYEVcEk8ZZbWNGjBwM3byYnM7PO7TlXraIEiK/HpzIrz/wwaxbdCgvZMngwDWw4KZIKbE06u5beLNm1q85tBWxH7dtvv2Xz5s01P5o2ZQrk5cHrr0M9WzPJas7YWJo4nRin0+ooyq7GjIGSEpp8/jmzZs1i9erVPPLII95pe8YMaNAA7rqLwsJCMjMz+fjjj2nVqhX1fsa+lBQwhpvatCE7O5sz4/nXrFlzYSc2Ozsgj6Ype+r24YcUhoRQPn48zjqun9hy1y52xsZCeLh3wqmgVTh5MgVA6ltvWR1FBaFY9yz0zv3769xWwPZU0tLSiI6OZtiwYZ4/KCfH1UEbNw569vRdOFW1+HjCgKIDOoGaqkZKCqSmwnPPcUvv3vz2t78lLS2NnJycurf9wQeucXBxcUyePJlRo0bx1VdfcY0ujHu24/XThg3Jy8vjwIEDHDp0iEOHDp3bUSsuhi1btKOmvCa6bVt+uOceUk6cYNljj9W6nZMFBXQ5eZKjycleTKeC0YGvvyZ1715W9epFbOvWVsdRQSgkJoYiERyHD9e9LS/k8buCggLmz5/PyJEjifL0kLUxrglEGjeG557zbUBVJUfz5gAc27HD4iTK1qZPh4IC+NWvmPT444SHhzNjxoy6tZmbC/v3w9VXc/r0ad59911uv/12tm/fzqxZs7yTO5C1bg3x8SS7TzPNzs6u+rTQdetc/5ZqR015UZ+332ZneDhx06ZRXsvT43fMn08EEDZwoFezqeCz86GHKAOS33jD6igqiB0ND6dBQUGd2wnIjlpmZianT5+u2WmPc+fC11/DCy/o2AqLhCckAFC0c6fFSZStXXklvPkmLF1K/NSp3HrrrcyePZvS0tLat3lm3FVKCgsWLKCwsJDx48fTvn17wsLCvJM7kIlASgrN9u9HRM7pqHXv3v3H7Sq9jkp5S0hYGAXjxtG5pIRvJk6sVRuFn3wCQKv//m8vJlPB5ti2bfRYt47lHTrQulcvq+OoIFYUFUX08eN1bifgOmrGGNLT00lNTfV8AoCiInj8cddsb/fd59uAqlqR7lMMTu7da3ESZXujR7vGqz3/PJO6duXIkSMsXLiw9u2d6WB0705GRgZt27bluuuu807WYJGSgmPDBpI7dDjbUWvfvj2NGzf+cZvsbIiLc00mopQXpbz8Mj9ERpI8bRrH9+2r8eNDs7LYGRZGK/0RQV1EzvjxRAItX3rJ6igqyJ2MjSXWC5OhBVxHbcWKFeTk5NTsaNqzz8KBA/DGG6BrZVimUWIiACU6Rk154vXX4aqr6Dl1KskJCQwbNozGjRszf/78mreVnc3hyEgatWnD4sWLGT16NCE6mdC5UlKgtJSb2rdnwYIFvP/++/y8Y0e47DJo1Mh1ychwbSdidVoVZCQ0lNJXXyXB6WR1DScJO3XyJD/JzeVwUpKP0qlgUFJYSKelS8lq2pTkX/7S6jgqyJU1a0bzigoqysvr1E6ol/L4TVpaGlFRUdx1112ePWDzZvjrX12/0OsimJaKadcOgHIvDK5U9UBkJKSlIX368MHEiUx3OJg/fz4vv/wyd955Z42aKsnK4ttTp7jullvo1q0bDz/8sI9CBzD3kYiHr7nGdfopMKFxY/jsM7j/fjizftrQoVYlVEGu6/33s3rSJH6yeDHG6UQ8/DFl7dtv0xc4MHiwbwOqgLbq4Ye52ulkx6RJVkdR9YAkJBAF5O3aRbOf/KTW7QRUR+3YsWO89957jBgxgujo6Es/oLgYxo6FqCj40598H1BdVKy7o2aOHLE4iQoYvXpB1650Wr6c/5eVRUJCAo8//jibNm2ik3v620sqKqLBnj2scziYMWMG8TpGtWpJSdCwIW2OHOGlV15x3fboo6717d58E0ID6uNCBagTN99Mj9mz2frRRyR5eNTj9JtvcgJI0i/gqhrOsjJavfce6yMjSX30UavjqHogtG1bAPI3bqxTRy2gzv2ZM2cOJ0+e9Oy0x337oH9/+PZbeO01cM84qKwTGhFBoQjihVlwVD0h4hqrtmIFbNjAyJEjCQ0NrdEskGXffw9AZL9+2km7GIfDdSSt0oLXZGe7btNOmvKTpIceAmB/erpH2xfl5dF92zZykpKIrO/rIapqZU+ZQmJpKfn33uvxkVql6qKh++DE8R9+qFM7AfNuNcaQlpZG9+7dSU1NvfjG333n+iV++3b4+GMYNco/IdUlHXM4CDt2zOoYKpCMHOnqKEyYQIu//pXRgwYxc+ZMyi41jfepUzBlCkfdv572GTfOD2EDXEqKq3PmdLqm4V+zRmd4VH6V0KsXWyIiiF22zKPtV06ZQiwQ++CDPs2lApgxRE6dyu7QUPq9+KLVaVQ9EdOxIwCn6rgkVcB01FatWsWaNWu4//77kYsNZJ83D669Fho0gGXLYMgQ/4VUl1TUoAENTpywOoYKJM2auWZrXbkSXnyRyU4nubm5fPbZZxd/XGYm/P73xK5bx/fh4VwzfLh/8gaylBTXLLk7dsCuXVBYCJWn51fKDw726EHXY8c4tnv3JbeN+Mc/yHU4SH7gAT8kU4Eo57XX6HziBNvvuIOwyEir46h6Ir5LFwDK6jjTecB01NLT04mMjGTEiBFVb2CMa3bHYcNc0/CvXAldu/o3pLqkUw0b0vDUKatj2IqIPCsi60RkjYh8ISKXVbPdL0Rki4hsE5En/Z3TUm+95Rpzeu+9tMnKokPz5mRkZFz8MRkZlHXsSJQxfPTEEzj09L1LO3P0LDtb10xTlokbNYpQYMOZsZLVKNy+nV65uWzp0QPR9RBVNcqee45cEfq++abVUVQ90qhNG0oAOXSoTu0EREetqKiIOXPmnJ2e+wKnT7tOj/rd71z/XbJEx6TZVEl0NNF1Wbg4OL1kjLnSGNMdWAj87vwNRMQBvAEMBjoDd4lIZ7+mtIPRo5HiYl7o0YOFCxdyqLp/ADduhKwsvurQAacx/PrXv/ZrzIDVtatrrNqZjlpICHTrZnUqVc90GTOGoyI4//nPi2636Y9/JBxoMmGCf4KpgLP1vffokZfH+uuvp2FcnNVxVH0iwpHQUELrOIFeQHTU5s6dy4kTJxg7duyFdx4+DIMGwZw58PzzMGuWa5YyZUsVjRvTuKLC6hi2YoypvHR9FGCq2Kw3sM0Ys8MYUwrMBW7zRz5b6dcPOnbk5txcKioqyMzMrHq7GTMwoaE8vXEjAwYMoEOHDv7NGagiIqBzZ8jKcl2Sk6FhQ6tTqXrGER7O5sREknfupOIiP+yFL1zIboeDztWdaaPqvaNPPMExIMXDyWmU8qbCyEga1nFehoDoqKWnp9O1a1f6nr8OWk4O9O4Na9fCP/4BTz2lC7HanImLIxoo1XFq5xCR50VkLzCCKo6oAa2Ayic673PfVr+4Z4FsuHo1w7p3Z/r06RhzXr+2rAxmzeJov36s3LWL0aNHW5M1UKWmwr//Df/6l+tvpSwQcuutNDWG9dXM8Fq8fz/dDh9mW7duhDgcfk6nAsHepUvptWcPq3r1okliotVxVD1UHB1NzMmTdWrD9h21NWvW8N133104icjChXD11VBeDt98A3fcYV1I5bEQ9/TJBdu2WZzEv0TkXyKyvorLbQDGmKeNMW2Ad4GqzuOp6heIqo68ndnfWBH5XkS+z8vL886TsItRo8Dh4H9btmTz5s2sWLHi3Ps//RRyc8kMDyc6OpqhukBzzbzwAsyc6bro+pPKIp0ffZRy4OjMmVXev+HFFwkHYu+916+5VODY/dBDlAGd337b6iiqniqJiyOujsN9bN9RS09PJyIigpEjR7puMAZefhluvRU6dnRNGtKzp7UhlcdCW7YE4PjOnRYn8S9jzPXGmK5VXD46b9M5QFW/OuwD2lS63ho4cJH9pRljUo0xqc2CbW2hhAQYMoRu2dlER0ZeOKlIRgbOFi343bJlDB8+nKioKGtyBqqWLeHuu12XhASr06h6qnFiIhtiY2m9ahXG6bzgfvngAw6KcFVVQyJUvZe3bh29Nm5kRXIyLXVCJGURZ/PmNDWG08ePX3rjati6o1ZcXExmZiZDhw4lLi4OSkth7Fh47DG4/Xb4+mtoVf/O/gpkEZe5JjQs3rPH4iT2ISJJla7eCmyuYrPvgCQRaSci4cBw4OIj7YPZmDGEHD7M7/v1Y+7cuRQXF7tuP3QIPvmEnJQUik6dYsyYMdbmVErV2ombbuKK0lI2vPvuObeXFhTQZd8+NiYnExoeblE6ZWcbx40jFGg7darVUVQ95nD3UY5s3FjrNmzdUZs3bx7Hjx93TSKSnw833gjvvOMaizZvng5yD0BRbdsCcHr/fouT2Mqf3KdBrgNuAB4BEJHLRORTAGNMOa5TIhcBm4B5xpgNVgW23E03QfPmjCoro6ioiOH9+7OsRQu2XXEFVFQwYdUqOnXqRJ8+faxOqpSqpW7PPUcJcPCPfzzn9vXPP09DIHLUKEtyKXs7tmcP3bOyyGrdmnY//7nVcVQ91uDyywEo3LSp1m3YemGh9PR0kpOT6d+8OfTtC7t3w+zZrin4VUCKdr9pS+u4rkQwMcZUOcDSGHMAGFLp+qfAp/7KZWthYTBqFPGvvsoDd95J7//8hz65uWyKiuK9Fi0ob9eOPzz22LnjWpVSASXm8sv5PimJPps2cXD9ehLca6OGzZ7NrpAQUv/nfyxOqOxozbhxDACa6BhbZbHoJNcJUyfqMC+DR0fULrXQrrhMdd+/TkR61DqR2/r161m+fDl/GDAA6dsXCgth6VLtpAW4WPc06c7cXIuTqIA3ejRSXs4bvXpxD+C45Ra6njjBsEOHWL58uU4iolQQaPHqqzQCNt13HwDH162jW24uG1JTCdeleGzNiu+OpwsK6PTFF3wXH6/LNijLxXbqBEDp7t21buOSHTUPF9odDCS5L2OBt2qdyC09PZ0HHA6GvvOOaxzaypXw05/WtVllsYZNm3IK4OhRq6OoQNelC/TpA1OmwMGDoOPRlAo6bQYPJqttW/qsWMGRrCy2PvkkTqD1009bHU1dhFXfHVdOmEBzpxPHU0/VtSml6ize3VGrqMNwH09OfTy70C6AiJxZaLfyyLjbgFnGtaBRlojEikiCMeZgbUKdOnGC5GnTGF9RAYMHw9y5EBNTm6aUDRWGhBC9YwcrAvCDNqZzZzrpr3T2MWYMjBsHzZu7xq0ppYJOy9mzKR0wgBPXXENyeTlfxcYy8JZbrI6lLs7v3x3LT58mcd481kdFkTJxYh3jK1V3YVFRHBHBUYezyDzpqFW10O75I/SrW4z3nGITkbG4fjWhrXtSiaqsmTyZ8aWl7L3jDtrMnQuhth5Kp2ooLyqKnvn5rvWaAsx/2rUD7ajZx7Bh8MQTrg5bWJjVaZRSPtD+2mtZ/Yc/0OGZZzguQtMZM3T8qf35/bvj6hdeoHd5OVmPPYaE2HquPFWP5DdoQIP8/Fo/3pMekCcL7Xq0GK8xJg1IA0hNTa12sd4+f/kLaxMTuXLiRNB/jINOYk4Om/7zH6tj1MrliYlWR1CVNW4MW7dCbKzVSZRSPtTj//6PonHjcJw6RTf9dzgQ+P27Y68pU1gTH0/vBx+sSU6lfCszk9bupalqw5OOmicL7dZoMd5LCXE4uEpncwpajRMTaawftMpbgm1Bb6VUlaKbNyfa6hDKU37/7ighIXR/5JHaPlwpn7jijion9vaYJ8eGPVlo95/A3e4ZfPoCx2p7jrFSSimllApo+t1RKS+45BE1Y0y5iJxZaNcBZBhjNojIb9z3T8O1ttMQYBtwEhjtu8hKKaWUUsqu9LujUt7h0SwdVS206y6yM38bQE8KVkoppZRS+t1RKS/QaXGUUkoppZRSyma0o6aUUkoppZRSNqMdNaWUUkoppZSyGe2oKaWUUkoppZTNaEdNKaWUUkoppWxGO2pKKaWUUkopZTPaUVNKKaWUUkopmxHXMhYW7FgkD9h9kU2aAkf8FOdi7JBDMwROhkRjTDN/hfFEgNSaZtAMNc1gq1rTOtMMAZgBAuwzzYM6A3u8tppBM9QkQ7V1ZllH7VJE5HtjTKrm0Ayawbfs8Jw0g2awWwZvs8Nz0gyawa45vMkOz0kzaAZvZdBTH5VSSimllFLKZrSjppRSSimllFI2Y+eOWprVAdzskEMzuGgG37DDc9IMLprBxQ4ZvM0Oz0kzuGiGH9klhzfZ4TlpBhfN4FLrDLYdo6aUUkoppZRS9ZWdj6gppZRSSimlVL1keUdNRH4hIltEZJuIPFnF/SIiU933rxORHhZkGOHe9zoRWSYiV/k7Q6XteolIhYgMtSKDiAwUkTUiskFEvvJ3BhFpLCIfi8had4bRPsiQISK5IrK+mvt9/p70NjvUmYc5tNZ+3Caoay0Y6wzsUWtaZ55nCPY6c+8j6GpN68yzDJW20zoL1Dozxlh2ARzAdqA9EA6sBTqft80Q4DNAgL7ACgsyXA00cf892IoMlbZbCnwKDLXgdYgFNgJt3debW5DhKeDP7r+bAflAuJdzXAv0ANZXc79P35PevtihzmqQQ2vN1I9aC7Y6q8Hrqp9p526ndaafab54XbXOzt1O6yxA68zqI2q9gW3GmB3GmFJgLnDbedvcBswyLllArIgk+DODMWaZMabAfTULaO3F/XuUwe0h4H0g18v79zTDr4APjDF7AIwx3s7hSQYDRIuIAI1wFVu5N0MYY752t1sdX78nvc0OdeZRDq21s4K+1oKwzsAetaZ15nmGoK8zCMpa0zrzMIOb1lkA15nVHbVWwN5K1/e5b6vpNr7OUNm9uHrE3nTJDCLSCvglMM3L+/Y4A3AF0EREvhSRVSJytwUZXgc6AQeAHOARY4zTyzkuxdfvSW+zQ53VZh9aa/W71gKtzsAetaZ15mEGtM7OCLRa0zrzMIPW2VkBW2ehPovjGanitvOnofRkG19ncG0oMghXsfX34v49zfAKMMkYU+H6QcDrPMkQCvQEfgZEAstFJMsY84MfM9wIrAGuAzoAi0XkG2PMcS9l8ISv35PeZoc6q9E+tNa01gi8OgN71JrWmecZtM5cAq3WtM48z/AKWmcQwHVmdUdtH9Cm0vXWuHq7Nd3G1xkQkSuBd4DBxpijXty/pxlSgbnuQmsKDBGRcmPMAj9m2AccMcYUA8Ui8jVwFeCtYvMkw2jgT8YYA2wTkZ1AMrDSSxk84ev3pLfZoc483ofW2tlt6nutBVqdgT1qTevM8wxaZy6BVmtaZ55n0DpzCdw6M14cSFfTC66O4g6gHT8OAOxy3jY3ce7gu5UWZGgLbAOutup1OG/7v+H9AaGevA6dgCXubRsC64Gufs7wFjDF/XcLYD/Q1Af/Ty6n+gGhPn1PWvH+8sdz0lqr0etQL2otmOqsBq+rfqZduL3WmdHPNC+/rlpnF26vdWYCr84sPaJmjCkXkQnAIlyztmQYYzaIyG/c90/DNUvNEFxv9pO4esX+zvA7IB540/2rRLkxJtXPGXzKkwzGmE0i8jmwDnAC7xhjqpyG1FcZgGeBv4lIDq43+yRjzBFvZQAQkb8DA4GmIrIPeAYIq5TBp+9Jb7NDndUgh9ZaPam1YKszsEetaZ15nqE+1BkEX61pndUog09pnf3IV3Um7l6eUkoppZRSSimbsHrWR6WUUkoppZRS59GOmlJKKaWUUkrZjHbUlFJKKaWUUspmtKOmlFJKKaWUUjajHTWllFJKKaWUshntqCmllFJKKaWUzWhHTSmllFJKKaVsRjtqSimllFJKKWUz/x8r01sU0Fc4gQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots( 1, 4, figsize=(15,5) )\n",
    "\n",
    "plt.sca( axes[0] )\n",
    "Vtheory = np.linspace(0, 1.0, 19)\n",
    "Vsolve, *_ = laplace1d_matrix(19) \n",
    "Vinvert, *_ = laplace1d_matrix(19, invert=True)  \n",
    "plt.plot(Vtheory, Vsolve - Vtheory, 'k-', label='solve')\n",
    "plt.plot(Vtheory, Vinvert - Vtheory, 'r-', label='invert')\n",
    "plt.legend( loc=0 )\n",
    "plt.title('n=19')\n",
    "\n",
    "plt.sca( axes[1] )\n",
    "Vtheory = np.linspace(0, 1.0, 99)\n",
    "Vsolve, *_ = laplace1d_matrix(99) \n",
    "Vinvert, *_ = laplace1d_matrix(99, invert=True)  \n",
    "plt.plot(Vtheory, Vsolve - Vtheory, 'k-', label='solve')\n",
    "plt.plot(Vtheory, Vinvert - Vtheory, 'r-', label='invert')\n",
    "plt.legend( loc=0 )\n",
    "plt.title('n=99')\n",
    "\n",
    "plt.sca( axes[2] )\n",
    "Vtheory = np.linspace(0, 1.0, 999)\n",
    "Vsolve, *_ = laplace1d_matrix(999) \n",
    "Vinvert, *_= laplace1d_matrix(999, invert=True)  \n",
    "plt.plot(Vtheory, Vsolve - Vtheory, 'k-' , label='solve')\n",
    "plt.plot(Vtheory, Vinvert - Vtheory, 'r-' , label='invert')\n",
    "plt.legend( loc=0 )\n",
    "plt.title('n=999')\n",
    "\n",
    "plt.sca( axes[3] )\n",
    "Vtheory = np.linspace(0, 1.0, 1999)\n",
    "Vsolve, *_ = laplace1d_matrix(1999) \n",
    "Vinvert, *_ = laplace1d_matrix(1999, invert=True)  \n",
    "plt.plot(Vtheory, Vsolve - Vtheory, 'k-' , label='solve')\n",
    "plt.plot(Vtheory, Vinvert - Vtheory, 'r-' , label='invert')\n",
    "plt.legend( loc=0 )\n",
    "plt.title('n=1999')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Special cases\n",
    "\n",
    "Solving a general matrix equation requires $O(N^3)$ operations and may involve numerical problems.\n",
    "\n",
    "If the matrix has some special property then it may be possible to take advantage of this to obtain more accurate results more quickly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['_solve_toeplitz',\n",
       " '_solvers',\n",
       " 'cho_solve',\n",
       " 'cho_solve_banded',\n",
       " 'lu_solve',\n",
       " 'solve',\n",
       " 'solve_banded',\n",
       " 'solve_circulant',\n",
       " 'solve_continuous_are',\n",
       " 'solve_continuous_lyapunov',\n",
       " 'solve_discrete_are',\n",
       " 'solve_discrete_lyapunov',\n",
       " 'solve_lyapunov',\n",
       " 'solve_sylvester',\n",
       " 'solve_toeplitz',\n",
       " 'solve_triangular',\n",
       " 'solveh_banded']"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[name for name in dir(scipy.linalg) if 'solve' in name]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 3) (100,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.00990099, 0.0990099 , 0.18811881, 0.27722772, 0.36633663,\n",
       "       0.45544554, 0.54455446, 0.63366337, 0.72277228, 0.81188119,\n",
       "       0.9009901 , 0.99009901])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A tri-diagonal matrix has a simple banded structure.\n",
    "\n",
    "banded = np.zeros( (A.shape[0], 3) )\n",
    "\n",
    "banded[0,0] = 0\n",
    "banded[1:,0] = -1\n",
    "\n",
    "banded[0:,1] = 2\n",
    "\n",
    "banded[0:-1,2] = -1\n",
    "banded[-1,2] = 0\n",
    "\n",
    "scipy.linalg.solve_banded((1,1), banded.T, y ) [::9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17.4 µs ± 98.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
      "110 µs ± 870 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "# Using the special \"banded\" algorithm is 6x faster than the general case.\n",
    "#\n",
    "\n",
    "%timeit scipy.linalg.solve(A, y);\n",
    "%timeit scipy.linalg.solve_banded((1,1), banded.T, y );\n",
    "\n",
    "#7.4 µs ± 98.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
    "#110 µs ± 870 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sparse Linear Systems\n",
    "Numerical Recipes p72 http://www.aip.de/groups/soe/local/numres/bookcpdf/c2-7.pdf\n",
    "\n",
    "A system of linear equations is called *sparse* if only a relatively small number of its matrix elements $a_{ij}$ are nonzero.  It is wasteful to use general methods of linear algebra on such problems, because most of the $O(N^3)$ arithmetic operations devoted to solving the set of equations or inverting the matrix involve adding or multiplying by zeros.  Furthermore, you might wish to work problems so large as to tax your available memory space, and it is wasteful to reserve storage for large numbers of zeros.  Note that there are two distinct (and not always compatible) goals for any sparse matrix method: saving time and/or saving space.\n",
    "\n",
    "See also: \n",
    "\n",
    "https://en.wikipedia.org/wiki/Sparse_matrix\n",
    "\n",
    "https://www.sharcnet.ca/help/index.php/Solving_Systems_of_Sparse_Linear_Equations\n",
    "\n",
    "http://hplgit.github.io/bumpy/doc/pub/lectures-basics-1.html#___sec28\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([-0.00257732,  0.00257732,  0.00773196,  0.0128866 ,  0.01804124,\n",
       "        0.02319588,  0.02835052,  0.03350515,  0.03865979,  0.04381443,\n",
       "        0.04896907,  0.05412371,  0.05927835,  0.06443299,  0.06958763,\n",
       "        0.07474227,  0.07989691,  0.08505155,  0.09020619,  0.09536082,\n",
       "        0.10051546,  0.1056701 ,  0.11082474,  0.11597938,  0.12113402,\n",
       "        0.12628866,  0.1314433 ,  0.13659794,  0.14175258,  0.14690722,\n",
       "        0.15206186,  0.15721649,  0.16237113,  0.16752577,  0.17268041,\n",
       "        0.17783505,  0.18298969,  0.18814433,  0.19329897,  0.19845361,\n",
       "        0.20360825,  0.20876289,  0.21391753,  0.21907216,  0.2242268 ,\n",
       "        0.22938144,  0.23453608,  0.23969072,  0.24484536,  0.25      ,\n",
       "        0.25515464,  0.26030928,  0.26546392,  0.27061856,  0.2757732 ,\n",
       "        0.28092784,  0.28608247,  0.29123711,  0.29639175,  0.30154639,\n",
       "        0.30670103,  0.31185567,  0.31701031,  0.32216495,  0.32731959,\n",
       "        0.33247423,  0.33762887,  0.34278351,  0.34793814,  0.35309278,\n",
       "        0.35824742,  0.36340206,  0.3685567 ,  0.37371134,  0.37886598,\n",
       "        0.38402062,  0.38917526,  0.3943299 ,  0.39948454,  0.40463918,\n",
       "        0.40979381,  0.41494845,  0.42010309,  0.42525773,  0.43041237,\n",
       "        0.43556701,  0.44072165,  0.44587629,  0.45103093,  0.45618557,\n",
       "        0.46134021,  0.46649485,  0.47164948,  0.47680412,  0.48195876,\n",
       "        0.4871134 ,  0.49226804,  0.49742268,  0.50257732])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.sparse, scipy.sparse.linalg\n",
    "N = 99\n",
    "lower = np.ones(N-1)\n",
    "diag = -2*np.ones(N) ; diag[0] = diag[-1] = 1 #; print(diag)\n",
    "upper = np.ones(N-1)\n",
    "\n",
    "#np.diag(lower, -1) + np.diag(diag,0) + np.diag(upper, +1)\n",
    "sparseA = scipy.sparse.diags([lower,diag,upper], [-1,0,1] ) ; print( sparseA.__sizeof__() )\n",
    "\n",
    "b = np.zeros(N) ; b[-1] = 1.0\n",
    "scipy.sparse.linalg.spsolve( sparseA, b )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scipy Sparse Matricies\n",
    "\n",
    "https://docs.scipy.org/doc/scipy/reference/sparse.html\n",
    "\n",
    "Sparse matrix classes:\n",
    "\n",
    "    bsr_matrix(arg1[, shape, dtype, copy, blocksize])  Block Sparse Row matrix\n",
    "    \n",
    "    coo_matrix(arg1[, shape, dtype, copy])  A sparse matrix in COOrdinate format\n",
    "    \n",
    "    csc_matrix(arg1[, shape, dtype, copy])  Compressed Sparse Column matrix\n",
    "    \n",
    "    csr_matrix(arg1[, shape, dtype, copy])  Compressed Sparse Row matrix\n",
    "    \n",
    "    dia_matrix(arg1[, shape, dtype, copy]) Sparse matrix with DIAgonal storage\n",
    "    \n",
    "    dok_matrix(arg1[, shape, dtype, copy]) Dictionary Of Keys based sparse matrix\n",
    "    \n",
    "    lil_matrix(arg1[, shape, dtype, copy])  Row-based list of lists sparse matrix\n",
    "\n",
    "    spmatrix([maxprint]) provides a base class for all sparse matrices.\n",
    "\n",
    "For usage information, see\n",
    "\n",
    "https://docs.scipy.org/doc/scipy/reference/sparse.html#usage-information\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# demonstrate how to convert a numpy ndarray to CSR format and back again\n",
    "#\n",
    "v, A, y = laplace1d_matrix(4)\n",
    "s = scipy.sparse.csr_matrix(A)\n",
    "assert( np.all( s.toarray() == A ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 5, 9, 5)\n",
      "(5, 11, 25, 11)\n",
      "(10, 26, 100, 26)\n",
      "(20, 56, 400, 56)\n",
      "(100, 296, 10000, 296)\n",
      "(200, 596, 40000, 596)\n",
      "(500, 1496, 250000, 1496)\n",
      "(1000, 2996, 1000000, 2996)\n"
     ]
    }
   ],
   "source": [
    "# compare sparse and full matrix storage requirement\n",
    "#\n",
    "#\n",
    "stack = []\n",
    "for n in [3,5,10,20,100,200,500,1000]:\n",
    "    v, A, y = laplace1d_matrix(n)\n",
    "    s = scipy.sparse.csr_matrix(A)\n",
    "    stack.append( (n, s.count_nonzero(), A.size, s.size ) )\n",
    "\n",
    "print( *stack , sep='\\n' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'array width,length')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stack = np.array(stack)\n",
    "fig, axes = plt.subplots(1,3, figsize=(12,5))\n",
    "for indx,ax in enumerate(axes):\n",
    "    ax.plot(stack[:,0], stack[:,1], label='full')\n",
    "    ax.plot(stack[:,0], stack[:,2], label='sparse')\n",
    "    if indx==2:\n",
    "        ax.set_xscale('log')\n",
    "    if indx >= 1:\n",
    "        ax.set_yscale('log')\n",
    "plt.legend( loc=0 )\n",
    "axes[0].set_ylabel('# of elements')\n",
    "axes[0].set_xlabel('array width,length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n",
       "       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n",
       "       0.90909091, 1.        ])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v, A, y = laplace1d_matrix(100)\n",
    "s = scipy.sparse.csr_matrix(A)\n",
    "sparse.linalg.spsolve(s, y)[::9]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even for a not very large array ($N=100$) the sparse solver is almost twice as fast as the full matrix approach."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "112 µs ± 1.31 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "148 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n",
      "69.2 µs ± 709 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit scipy.linalg.solve(A, y)\n",
    "#%timeit scipy.linalg.solve(A, y, assume_a='sym')\n",
    "%timeit sparse.linalg.spsolve(s, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.321839080459771"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "110/17.4"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
